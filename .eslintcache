[{"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\index.tsx":"1","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\reportWebVitals.ts":"2","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\store\\Store.ts":"3","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\App.tsx":"4","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\store\\rootReducer.ts":"5","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\FirebaseApp.ts":"6","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\ProtectedRoutes.tsx":"7","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\pages\\Login.tsx":"8","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\store\\alertHistory\\reducers.ts":"9","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\store\\isLoading\\reducers.ts":"10","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\firebaseConfig.ts":"11","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\store\\sensors\\reducers.ts":"12","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\Header.tsx":"13","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\pages\\AlertHistory.tsx":"14","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\pages\\Settings.tsx":"15","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\pages\\PageNotFound.tsx":"16","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\pages\\DashBoard.tsx":"17","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\pages\\Members.tsx":"18","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\services\\auth\\auth.ts":"19","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\repositories\\sensorRepository.ts":"20","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\data-fetch\\RestAPITest.ts":"21","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\repositories\\alertHistoryRepository.ts":"22","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\Sensor.tsx":"23","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\CostomLine.tsx":"24","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\SensorForm.tsx":"25","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\store\\sensors\\actions.ts":"26","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\services\\RestHTTP.ts":"27","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\data-fetch\\env.ts":"28","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\store\\isLoading\\actions.ts":"29","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\store\\alertHistory\\actions.ts":"30"},{"size":800,"mtime":1609394609091,"results":"31","hashOfConfig":"32"},{"size":440,"mtime":1609394582026,"results":"33","hashOfConfig":"32"},{"size":365,"mtime":1609394609098,"results":"34","hashOfConfig":"32"},{"size":1421,"mtime":1609394609080,"results":"35","hashOfConfig":"32"},{"size":389,"mtime":1609395909507,"results":"36","hashOfConfig":"32"},{"size":184,"mtime":1609394609081,"results":"37","hashOfConfig":"32"},{"size":1552,"mtime":1609406911193,"results":"38","hashOfConfig":"32"},{"size":5513,"mtime":1609394609086,"results":"39","hashOfConfig":"32"},{"size":296,"mtime":1609394609100,"results":"40","hashOfConfig":"32"},{"size":342,"mtime":1609394609103,"results":"41","hashOfConfig":"32"},{"size":329,"mtime":1609394609089,"results":"42","hashOfConfig":"32"},{"size":1165,"mtime":1609394609106,"results":"43","hashOfConfig":"32"},{"size":1413,"mtime":1609406961381,"results":"44","hashOfConfig":"32"},{"size":6075,"mtime":1609394609086,"results":"45","hashOfConfig":"32"},{"size":4027,"mtime":1609406746679,"results":"46","hashOfConfig":"32"},{"size":680,"mtime":1609407805795,"results":"47","hashOfConfig":"32"},{"size":9652,"mtime":1609397000857,"results":"48","hashOfConfig":"32"},{"size":4414,"mtime":1609394582012,"results":"49","hashOfConfig":"32"},{"size":765,"mtime":1609394609096,"results":"50","hashOfConfig":"32"},{"size":1762,"mtime":1609394609093,"results":"51","hashOfConfig":"32"},{"size":2441,"mtime":1609394582019,"results":"52","hashOfConfig":"32"},{"size":540,"mtime":1609394609092,"results":"53","hashOfConfig":"32"},{"size":2145,"mtime":1609394582004,"results":"54","hashOfConfig":"32"},{"size":1529,"mtime":1609396809389,"results":"55","hashOfConfig":"32"},{"size":6852,"mtime":1609394582006,"results":"56","hashOfConfig":"32"},{"size":315,"mtime":1609394609106,"results":"57","hashOfConfig":"32"},{"size":572,"mtime":1609394609095,"results":"58","hashOfConfig":"32"},{"size":70,"mtime":1609394582020,"results":"59","hashOfConfig":"32"},{"size":138,"mtime":1609394609102,"results":"60","hashOfConfig":"32"},{"size":103,"mtime":1609394609099,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"zgsfyd",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"64"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\index.tsx",[],["131","132"],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\reportWebVitals.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\store\\Store.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\App.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\store\\rootReducer.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\FirebaseApp.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\ProtectedRoutes.tsx",["133","134","135","136"],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\pages\\Login.tsx",["137"],"import React from \"react\";\r\nimport {userLogin} from \"../../services/auth/auth\";\r\nimport {withRouter, RouteProps} from 'react-router';\r\n\r\n\r\nclass Login extends React.Component<RouteProps,{[key:string]:any}>{\r\n    constructor(props:any) {\r\n        super(props);\r\n\r\n        this.state={\r\n            email:\"\",\r\n            password:\"\",\r\n            stayLogged:false\r\n        }\r\n    }\r\n\r\n    handleOnSubmit = (event: { preventDefault: () => void; }) => {\r\n        event.preventDefault();\r\n        userLogin(this.state.email, this.state.password, this.state.stayLogged).then(\r\n            e=>console.log(\"user logged\")).catch((e)=>alert(e));\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div className=\"bg-gradient-primary\" style={{background:\" rgb(255,145,77)\"}}>\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div\r\n                        className=\"col-md-9 col-lg-12 col-xl-10 d-flex flex-column justify-content-center align-content-center align-self-center\">\r\n                        <div className=\"card shadow-lg o-hidden border-0 my-5\" style={{marginTop:\"60px\"}}>\r\n                            <div className=\"card-body p-0\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-lg-6 col-xl-6 d-none d-lg-flex\">\r\n                                    <div className=\"flex-grow-1 bg-login-image\"\r\n                                             style={{background:\"url(/assets/img/dogs/Monitor.png) center\"}}/>\r\n                                    </div>\r\n                                    <div className=\"col-lg-6\">\r\n                                        <div className=\"p-5\">\r\n                                            <div className=\"text-center\">\r\n                                                <h4 className=\"text-dark mb-4\">Welcome Back!</h4>\r\n                                            </div>\r\n                                            <form className=\"user\" onSubmit={(e)=>this.handleOnSubmit(e)}>\r\n                                                <div className=\"form-group\"><input\r\n                                                    className=\"form-control form-control-user\" type=\"email\"\r\n                                                    id=\"exampleInputEmail\" aria-describedby=\"emailHelp\"\r\n                                                    placeholder=\"Enter Email Address...\" name=\"email\"\r\n                                                    value={this.state.email}\r\n                                                    onChange={\r\n                                                        (event)=>this.setState({email:event.target.value})\r\n                                                    }\r\n                                                /></div>\r\n                                                <div className=\"form-group\"><input\r\n                                                    className=\"form-control form-control-user\" type=\"password\"\r\n                                                    id=\"exampleInputPassword\" placeholder=\"Password\" name=\"password\"\r\n                                                    value={this.state.password}\r\n                                                    onChange={(event)=>this.setState({password:event.target.value})}\r\n                                                />\r\n                                                </div>\r\n                                                <div className=\"form-group\">\r\n                                                    <div className=\"custom-control custom-checkbox small\">\r\n                                                        <div className=\"form-check\"><input\r\n                                                            className=\"form-check-input custom-control-input\"\r\n                                                            type=\"checkbox\" id=\"formCheck-1\"\r\n                                                                onChange={()=>this.setState({stayLogged:!this.state.stayLogged})}\r\n                                                        /><label\r\n                                                            className=\"form-check-label custom-control-label\"\r\n                                                            htmlFor=\"formCheck-1\">Remember Me</label></div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <button className=\"btn btn-primary btn-block text-white btn-user\"\r\n                                                        type=\"submit\" style={{background:\" rgb(255,145,77)\"}}>Login\r\n                                                </button>\r\n                                                <hr/>\r\n                                                    <hr/>\r\n                                            </form>\r\n                                            <div className=\"text-center\"><a className=\"small\"\r\n                                                                            href=\"forgot-password.html\">Forgot\r\n                                                Password?</a></div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n                </div>;\r\n    }\r\n}\r\n\r\nexport default Login;","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\store\\alertHistory\\reducers.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\store\\isLoading\\reducers.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\firebaseConfig.ts",["138"],"export default {\r\n    apiKey: \"AIzaSyD7p4qs_W25Dnu7XUj354SObDrFBNagabY\",\r\n    authDomain: \"seng22212-assignment-1.firebaseapp.com\",\r\n    projectId: \"seng22212-assignment-1\",\r\n    storageBucket: \"seng22212-assignment-1.appspot.com\",\r\n    messagingSenderId: \"77647971611\",\r\n    appId: \"1:77647971611:web:8b34537460983f39867fbe\"\r\n};","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\store\\sensors\\reducers.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\Header.tsx",["139","140"],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\pages\\AlertHistory.tsx",["141","142","143","144","145","146","147"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getAlertHistory } from \"../../repositories/alertHistoryRepository\";\r\n\r\n\r\nclass AlertHistory extends React.Component<any, {[key:string]:any}> {\r\n\r\n    constructor(props: {}| Readonly<{}>) {\r\n        super(props);\r\n    }\r\n\r\n    getAlertHistory =async () => {\r\n        const alertHistory = await getAlertHistory();\r\n        this.props.getAlertHistory();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getAlertHistory();\r\n    }\r\n\r\n    render() {\r\n\r\n        return <div className=\"d-flex flex-column\" id=\"content-wrapper\">\r\n                    <div id=\"content\">\r\n                        <div className=\"container-fluid\" style={{paddingTop: \"30px\"}}>\r\n                            <h3 className=\"text-dark mb-4\">Alert History</h3>\r\n                            <div className=\"card shadow\">\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"table-responsive table mt-2\" id=\"dataTable\" role=\"grid\" aria-describedby=\"dataTable_info\">\r\n                                        <table className=\"table my-0\" id=\"dataTable\">\r\n                                            <thead>\r\n                                            <tr>\r\n                                                <th>Id</th>\r\n                                                <th>Date&nbsp;</th>\r\n                                                <th>Cause</th>\r\n                                                <th>Threshold</th>\r\n                                                <th>Value</th>\r\n                                            </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {this.props.alertHistory.map((alert:any, index:number)=>{\r\n                                                    return (\r\n                                                        <tr key={index}>\r\n                                                            <td>{alert.id}</td>\r\n                                                            <td>{alert.sensorData.capturedDate}</td>\r\n                                                            <td>{alert.cause}</td>\r\n                                                            <td>{alert.sensorData.threshold}</td>\r\n                                                            <td>{alert.sensorData.dataValue}</td>\r\n                                                        </tr>\r\n                                                    )\r\n                                                })}\r\n                                                <tr></tr>\r\n                                            </tbody>\r\n                                            <tfoot>\r\n                                            <tr>\r\n                                                <td><strong>Id</strong></td>\r\n                                                <td><strong>Date</strong></td>\r\n                                                <td><strong>Cause</strong></td>\r\n                                                <td><strong>Threshold</strong></td>\r\n                                                <td><strong>Value</strong></td>\r\n                                            </tr>\r\n                                            </tfoot>\r\n                                        </table>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-md-6 align-self-center\">\r\n                                            <p id=\"dataTable_info\" className=\"dataTables_info\" role=\"status\" aria-live=\"polite\">Showing 1 to 10 of 27</p>\r\n                                        </div>\r\n                                        <div className=\"col-md-6\">\r\n                                            <nav className=\"d-lg-flex justify-content-lg-end dataTables_paginate paging_simple_numbers\">\r\n                                                <ul className=\"pagination\">\r\n                                                    <li className=\"page-item disabled\"><a className=\"page-link\" href=\"#\" aria-label=\"Previous\">\r\n                                                        <span aria-hidden=\"true\">«</span></a></li>\r\n                                                    <li className=\"page-item active\"><a className=\"page-link\" href=\"#\">1</a></li>\r\n                                                    <li className=\"page-item\"><a className=\"page-link\" href=\"#\">2</a></li>\r\n                                                    <li className=\"page-item\"><a className=\"page-link\" href=\"#\">3</a></li>\r\n                                                    <li className=\"page-item\"><a className=\"page-link\" href=\"#\" aria-label=\"Next\">\r\n                                                        <span aria-hidden=\"true\">»</span></a></li>\r\n                                                </ul>\r\n                                            </nav>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <footer className=\"bg-white sticky-footer\">\r\n                        <div className=\"container my-auto\">\r\n                            <div className=\"text-center my-auto copyright\"><span>Copyright © Monitor 2020</span></div>\r\n                        </div>\r\n                    </footer>\r\n                </div>;\r\n\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state : any) => ({\r\n    alertHistory: state.alertHistory\r\n})\r\n\r\nexport default connect(mapStateToProps, {getAlertHistory})(AlertHistory);\r\n\r\n/* const AlertHistory: React.FC = () => {\r\n    document.title = 'weatherApp | alert history'\r\n    return (\r\n        <div className='min-vh-100'>\r\n            <br/><br/>\r\n            <h2 className='pt-4'>Alert History</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AlertHistory; */\r\n","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\pages\\Settings.tsx",["148"],"import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Button, Container,} from \"react-bootstrap\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Swal from 'sweetalert2';\r\nimport {ISensor} from \"../../types/types\";\r\nimport {API} from \"../../data-fetch/RestAPITest\";\r\nimport Sensor from \"../Sensor\";\r\nimport SensorForm from \"../SensorForm\";\r\n\r\nconst Settings: React.FC = () => {\r\n    document.title = 'weatherApp | settings';\r\n    const history = useHistory();\r\n    const [sensorType, setSensorType] = useState('');\r\n    const [sensorSet, setSensorSet] = useState<ISensor[]>([]);\r\n    const [isAdd, setIsAdd] = useState(false);\r\n    const sensorCategories = JSON.parse(localStorage.getItem(\"SensorCategories\") as string) || [];\r\n\r\n    const handleSignOut = () => {\r\n        const swalWithBootstrapButtons = Swal.mixin({\r\n            customClass: {\r\n                confirmButton: 'btn btn-success',\r\n                cancelButton: 'btn btn-danger'\r\n            },\r\n            buttonsStyling: false\r\n        })\r\n\r\n        swalWithBootstrapButtons.fire({\r\n            title: 'Are you sure to sign out?',\r\n            text: \"You'll need sign in to use this!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes, sign out me!',\r\n            cancelButtonText: 'No, cancel!',\r\n            reverseButtons: true\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                swalWithBootstrapButtons.fire(\r\n                    'Sign out!',\r\n                    'You have been sign out successfully.',\r\n                    'success'\r\n                )\r\n                localStorage.setItem('IS_LOGGED_IN', 'false');\r\n                history.push('/signin');\r\n            } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n                swalWithBootstrapButtons.fire(\r\n                    'Cancelled',\r\n                    'Your imaginary login is safe :)',\r\n                    'error'\r\n                )\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    let fetchedSensorSet: ISensor[];\r\n    const getSensorSet = async () => {\r\n        const r = await API.GET(`/sensor?sensorType=${sensorType.toUpperCase()}`);\r\n        fetchedSensorSet = r;\r\n        return r;\r\n    }\r\n\r\n    useEffect(() => {\r\n        getSensorSet().then(() => {\r\n            let sensors = fetchedSensorSet.map((sen: ISensor) => sen);\r\n            setSensorSet(sensors);\r\n        })\r\n    }, [sensorType])\r\n\r\n    return (\r\n        <Container className='min-vh-100'>\r\n            <br/><br/><br/>\r\n            <h2>Settings</h2>\r\n            <br/>\r\n            <div><h3>Sensor manage</h3>\r\n\r\n                <select name=\"sensors\" id=\"sensors\"\r\n                        onChange={(e: ChangeEvent<HTMLSelectElement>) => setSensorType(e.target.value)}>\r\n                    <option value=\" \">Select Sensor category</option>\r\n                    {\r\n                        sensorCategories.map((sensorCategory: string, index:number) =>\r\n                            <option key={index} value={sensorCategory}>{sensorCategory}</option>)}\r\n                </select>\r\n                {\r\n                    sensorSet.map((sensor: ISensor, index: number) => <Sensor sensor={sensor} num={index + 1}\r\n                                                                              key={index}/>)\r\n                }\r\n\r\n            </div>\r\n            <div><h3 onClick={() => setIsAdd(true)} style={{cursor: 'pointer'}}><i className=\"feather-plus-circle\"/> Add\r\n                new sensor</h3>\r\n                {\r\n                    isAdd &&\r\n                    <SensorForm formTitle={\"Add Sensor\"} sensor={{title: '', id: '', threshold: 0, type: '', unit: ''}}\r\n                                setIsUpdatable={setIsAdd}/>\r\n                }\r\n            </div>\r\n\r\n            <div><h3>Sign out</h3></div>\r\n            <Button className='p-button mt-3' onClick={handleSignOut}>Sign out</Button>\r\n            <br/><br/>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Settings;\r\n","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\pages\\PageNotFound.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\pages\\DashBoard.tsx",["149","150","151","152","153","154","155","156","157"],"import React from \"react\";\r\nimport {signOutUser} from \"../../services/auth/auth\";\r\nimport index, {Line} from \"react-chartjs-2\";\r\nimport {Dropdown, DropdownButton} from \"react-bootstrap\";\r\nimport {connect} from \"react-redux\";\r\nimport {getSensorCategories, getSensorData, getSensors} from \"../../repositories/sensorRepository\";\r\nimport CustomLine from \"../CostomLine\";\r\n\r\nclass Dashboard extends React.Component<any,{[key:string]:any}>{\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n\r\n    }\r\n\r\n    onSensorCategoryChange = (event: any) => {\r\n        const category:any = this.props.sensorCategories.filter((cat:any)=>cat.type==event);\r\n        this.props.getSensors(category[0]);\r\n    }\r\n\r\n    onSensorChange = (event: any ) => {\r\n        const sensor:any = this.props.sensors.filter((sen:any)=>sen.id==event);\r\n        console.log(sensor[0]);\r\n        this.fetchSensorData(this.props.from, this.props.to,sensor[0]);\r\n\r\n    }\r\n\r\n    fetchSensorData = (from:any, to:any, sensor:any) => {\r\n        if(sensor!=null) {\r\n            this.props.getSensorData(sensor, from, to);\r\n        }\r\n    }\r\n\r\n    onFromDateChange = (event: any) => {\r\n        this.fetchSensorData(event.target.value, this.props.to, this.props.selectedSensor);\r\n\r\n\r\n    }\r\n\r\n    onToDateChange = (event: any) => {\r\n        this.fetchSensorData(this.props.from,event.target.value,this.props.selectedSensor);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.sensorCategories.length==0){\r\n            this.props.getSensorCategories();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div className=\"d-flex flex-column\" id=\"content-wrapper\">\r\n            <div id=\"content\">\r\n                <div className=\"container-fluid\" style={{marginTop: \"20px\"}}>\r\n                    <div className=\"d-sm-flex justify-content-between align-items-center mb-4\">\r\n                        <h3 className=\"text-dark mb-0\">Dashboard</h3><a\r\n                        className=\"btn btn-primary btn-sm d-none d-sm-inline-block\" role=\"button\" href=\"#\"><i\r\n                        className=\"fas fa-download fa-sm text-white-50\"></i>&nbsp;Generate Report</a>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-12 col-xl-12\">\r\n                            <div className=\"card shadow mb-4\">\r\n                                <div className=\"card-header d-flex justify-content-between align-items-center\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            <h6 className=\"text-primary font-weight-bold m-0\">{this.props.selectedCategory?this.props.selectedCategory.title:\"Select Sensor Category\"}</h6>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\" style={{marginBottom: \"30px\"}}>\r\n                                        <div className=\"col\" style={{marginRight: \"10px\"}}>\r\n                                            <Dropdown onSelect={(event:any)=>this.onSensorCategoryChange(event)}>\r\n                                                <Dropdown.Toggle id=\"dropdown-basic\">\r\n                                                    {this.props.selectedCategory?this.props.selectedCategory.title:\"Select Category\"}\r\n\r\n                                                </Dropdown.Toggle>\r\n\r\n                                                <Dropdown.Menu>\r\n                                                    {this.props.sensorCategories.map((category:any, index:number) => {\r\n                                                        return <Dropdown.Item key={category.type} eventKey={category.type}>{category.title}</Dropdown.Item>\r\n                                                    })}\r\n                                                </Dropdown.Menu>\r\n                                            </Dropdown>\r\n                                        </div>\r\n                                        <div className=\"col\" style={{marginRight: \"10px\"}}>\r\n                                            <Dropdown onSelect={(eventKey:any, e)=>this.onSensorChange(eventKey)}>\r\n                                                <Dropdown.Toggle id=\"dropdown-basic\">\r\n                                                    {this.props.selectedSensor?this.props.selectedSensor.title:\"Select Sensor\"}\r\n                                                </Dropdown.Toggle>\r\n\r\n                                                <Dropdown.Menu>\r\n                                                    {this.props.sensors.map((sensor:any, index:number)=>{\r\n                                                        return <Dropdown.Item key={sensor.id} eventKey={sensor.id}>{sensor.title}</Dropdown.Item>\r\n                                                    })}\r\n                                                </Dropdown.Menu>\r\n                                            </Dropdown>\r\n                                        </div>\r\n                                        <div className=\"col\"\r\n                                             style={{marginRight: \"10px\", height: \"38px\",paddingTop:\" 5px\",paddingLeft: \"24px\"}}>\r\n                                            <strong>From&nbsp;</strong><input type=\"date\"\r\n                                                                              value={this.props.from}\r\n                                                                              max={this.props.to}\r\n                                                                              onChange={(e)=>this.onFromDateChange(e)}\r\n                                                                              style={{color: \"rgb(133,135,150)\",borderWidth: \"0px\",filter:\"brightness(100%) grayscale(0%) invert(0%)\"}}/>\r\n                                        </div>\r\n                                        <div className=\"col\"\r\n                                             style={{marginRight: \"10px\",paddingTop: \"5px\",paddingLeft:\"24px\"}}>\r\n                                            <strong>To&nbsp;&nbsp;</strong><input type=\"date\"\r\n                                                                                  value={this.props.to}\r\n                                                                                  onChange={(e)=>this.onToDateChange(e)}\r\n                                                                                  min={this.props.from}\r\n                                                                                  style={{color:\" rgb(133,135,150)\",borderWidth:\"0px\",filter:\" brightness(100%) grayscale(0%) invert(0%)\"}}/>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"chart-area mb-2\">\r\n                                        <CustomLine data={this.props.sensorData}/>\r\n                                        <canvas\r\n                                            data-bs-chart=\"{&quot;type&quot;:&quot;line&quot;,&quot;data&quot;:{&quot;labels&quot;:[&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;Apr&quot;,&quot;May&quot;,&quot;Jun&quot;,&quot;Jul&quot;,&quot;Aug&quot;],&quot;datasets&quot;:[{&quot;label&quot;:&quot;Earnings&quot;,&quot;fill&quot;:true,&quot;data&quot;:[&quot;0&quot;,&quot;10000&quot;,&quot;5000&quot;,&quot;15000&quot;,&quot;10000&quot;,&quot;20000&quot;,&quot;15000&quot;,&quot;25000&quot;],&quot;backgroundColor&quot;:&quot;rgba(78, 115, 223, 0.05)&quot;,&quot;borderColor&quot;:&quot;rgba(78, 115, 223, 1)&quot;},{&quot;label&quot;:&quot;Threshold&quot;,&quot;fill&quot;:true,&quot;data&quot;:[&quot;2000&quot;,&quot;3000&quot;,&quot;8000&quot;,&quot;4500&quot;,&quot;6352&quot;,&quot;11000&quot;,&quot;50000&quot;,&quot;0&quot;,&quot;&quot;]}]},&quot;options&quot;:{&quot;maintainAspectRatio&quot;:false,&quot;legend&quot;:{&quot;display&quot;:false},&quot;title&quot;:{},&quot;scales&quot;:{&quot;xAxes&quot;:[{&quot;gridLines&quot;:{&quot;color&quot;:&quot;rgb(234, 236, 244)&quot;,&quot;zeroLineColor&quot;:&quot;rgb(234, 236, 244)&quot;,&quot;drawBorder&quot;:false,&quot;drawTicks&quot;:false,&quot;borderDash&quot;:[&quot;2&quot;],&quot;zeroLineBorderDash&quot;:[&quot;2&quot;],&quot;drawOnChartArea&quot;:false},&quot;ticks&quot;:{&quot;fontColor&quot;:&quot;#858796&quot;,&quot;padding&quot;:20}}],&quot;yAxes&quot;:[{&quot;gridLines&quot;:{&quot;color&quot;:&quot;rgb(234, 236, 244)&quot;,&quot;zeroLineColor&quot;:&quot;rgb(234, 236, 244)&quot;,&quot;drawBorder&quot;:false,&quot;drawTicks&quot;:false,&quot;borderDash&quot;:[&quot;2&quot;],&quot;zeroLineBorderDash&quot;:[&quot;2&quot;]},&quot;ticks&quot;:{&quot;fontColor&quot;:&quot;#858796&quot;,&quot;padding&quot;:20}}]}}}\"/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <footer className=\"bg-white sticky-footer\"></footer>\r\n        </div>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state : any) => ({\r\n    sensorCategories: state.sensors.categories,\r\n    sensors: state.sensors.sensors,\r\n    sensorData: state.sensors.sensorData,\r\n    from: state.sensors.from,\r\n    to:state.sensors.to,\r\n    selectedCategory:state.sensors.selectedCategory,\r\n    selectedSensor:state.sensors.selectedSensor\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps,{getSensorCategories, getSensors, getSensorData})(Dashboard);\r\n","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\pages\\Members.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\services\\auth\\auth.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\repositories\\sensorRepository.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\data-fetch\\RestAPITest.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\repositories\\alertHistoryRepository.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\Sensor.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\CostomLine.tsx",["158"],"import React from \"react\";\r\nimport {Line} from \"react-chartjs-2\";\r\n\r\nfunction CustomLine(props:any){\r\n\r\n    const labels: any[]=[];\r\n    const dataSet: any[]=[];\r\n    const thresholdSet: any[]=[];\r\n\r\n    props.data.map((data: any, index:number)=>{\r\n        labels.push(new Date(data.capturedDate).toDateString().substr(4));\r\n        dataSet.push(data.dataValue);\r\n        thresholdSet.push(data.threshold);\r\n    })\r\n\r\n    const chartData = {\r\n        labels: labels,\r\n        datasets:[\r\n            {\r\n                label: \"Sensor Reading\",\r\n                data:dataSet,\r\n                fill:true,\r\n                borderColor:'#6200ff'\r\n            },\r\n            {\r\n                label: \"Threshold Value\",\r\n                data:thresholdSet,\r\n                fill:false,\r\n                borderColor:'#ff1a00'\r\n            }\r\n        ],\r\n        options:{\r\n            responsive:false,\r\n            maintainAspectRatio: false\r\n        }\r\n\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className='d-none d-md-block d-lg-none'><Line data={chartData} width={100} height={50}/></div>\r\n            <div className='d-none d-lg-block'><Line data={chartData} width={100} height={35}/></div>\r\n            <div className='d-none d-sm-block d-md-none'><Line data={chartData} width={100} height={70}/></div>\r\n            <div className='d-sm-none'><Line data={chartData} width={90} height={100}/></div>\r\n        </div>\r\n    )\r\n\r\n    // ) <Line data={chartData} height={35} width={100}/>\r\n}\r\n\r\nexport default CustomLine;\r\n","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\components\\SensorForm.tsx",["159"],"import React, {ChangeEvent, FormEvent, useState} from \"react\";\r\nimport {Button, Col, Form, Row} from \"react-bootstrap\";\r\nimport {ISensor,} from \"../types/types\";\r\nimport Swal from \"sweetalert2\";\r\n\r\ntype UpdateSensorProps = {\r\n    sensor: ISensor;\r\n    formTitle: string;\r\n    setIsUpdatable: (arg: boolean) => void\r\n}\r\n\r\nconst SensorForm: React.FC<UpdateSensorProps> = (props) => {\r\n    const {sensor, formTitle} = props;\r\n    const [id, setId] = useState(sensor.id);\r\n    const [title, setTitle] = useState(sensor.title);\r\n    const [threshold, setThreshold] = useState(sensor.threshold);\r\n    const [type, setType] = useState(sensor.type);\r\n    const [unit, setUnit] = useState(sensor.unit)\r\n    const [validated, setValidated] = useState(false);\r\n    const sensorCategories = JSON.parse(localStorage.getItem(\"SensorCategories\") as string);\r\n\r\n    const handleUpdate = (event: FormEvent) => {\r\n        const form = event.currentTarget;\r\n        // @ts-ignore\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        } else if (title !== null && id !== null && title !== '' && id !== '') {\r\n            setValidated(false);\r\n            Swal.fire({\r\n                title: 'Do you want to save the changes?',\r\n                showDenyButton: true,\r\n                showCancelButton: true,\r\n                confirmButtonText: `Save`,\r\n                denyButtonText: `Don't save`,\r\n            }).then((result) => {\r\n                /* Read more about isConfirmed, isDenied below */\r\n                if (result.isConfirmed) {\r\n                    Swal.fire('Saved!', '', 'success');\r\n\r\n                    if (formTitle.split(' ')[0] === 'Add') {\r\n                        //TODO: add sensor function here.\r\n\r\n                    } else {\r\n                        //TODO: create sensor update function here\r\n                    }\r\n\r\n                    props.setIsUpdatable(false)\r\n                } else if (result.isDenied) {\r\n                    Swal.fire('Changes are not saved', '', 'info')\r\n                    props.setIsUpdatable(false)\r\n                }\r\n            })\r\n        } else {\r\n            setValidated(true);\r\n        }\r\n\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"my-4 p-3 \"\r\n             style={{maxWidth: '400px', border: '1px solid gray', margin: \"auto\", borderRadius: '10px'}}>\r\n            <Form.Row>\r\n                <Col className=\"pl-1 mb-3\">\r\n                    <strong style={{textDecoration: 'underline'}}>{formTitle}</strong>\r\n\r\n                    <i className='feather-x-circle text-dark float-right' onClick={() => props.setIsUpdatable(false)}/>\r\n                </Col>\r\n            </Form.Row>\r\n            <Form noValidate validated={validated}>\r\n\r\n                <Form.Row>\r\n                    <Form.Group className=\"form-group-dev\">\r\n                        <Form.Label className=\"text-left label-text\">Title of Sensor</Form.Label>\r\n                        <Form.Control required type=\"text\" className=\"form-input\" placeholder=\"\"\r\n                                      value={title ? title : ''}\r\n                                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTitle(e.target.value)}/>\r\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group className=\"form-group-dev\">\r\n                        <Form.Label className=\" label-text \">Sensor Id</Form.Label>\r\n                        <Form.Control className=\"form-input\" required type=\"text\" placeholder=\"\" value={id ? id : ''}\r\n                                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setId(e.target.value)}/>\r\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Group className=\"form-group-dev\">\r\n                        <Form.Label className=\"text-left label-text\">Threshold</Form.Label>\r\n                        <Row>\r\n                            <Col xs={8} sm={8}>\r\n                                <Form.Control className=\"form-input\" required type=\"range\" placeholder=\"\"\r\n                                              value={threshold ? threshold : ''}\r\n                                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setThreshold(Number(e.target.value))}/>\r\n                            </Col>\r\n                            <Col xs={4} sm={4}>\r\n                                <Form.Control className=\"form-input\" required type=\"text\" placeholder=\"\"\r\n                                              value={threshold ? threshold : ''}\r\n                                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setThreshold(Number(e.target.value))}/>\r\n                            </Col>\r\n                        </Row>\r\n\r\n\r\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Label className=\"text-left Sensor-label\">Sensor type</Form.Label>\r\n                    <Form.Group controlId=\"SensorSelectID\" className=\"form-group-dev\">\r\n                        <br/>\r\n                        <select name=\"sensors\" id=\"sensors\"\r\n                                onChange={(e: ChangeEvent<HTMLSelectElement>) => setType(e.target.value)}>\r\n                            {\r\n                                sensorCategories.map((sensorCategory: string, index:number) =>\r\n                                    <option key={index} value={sensorCategory}>{sensorCategory}</option>)}\r\n                        </select>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Group className=\"form-group-dev\">\r\n                        <Form.Label className=\"text-left label-text\">Sensor unit</Form.Label>\r\n                        <Form.Control className=\"form-input\" required type=\"text\" placeholder=\"\"\r\n                                      value={unit ? unit : ''}\r\n                                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUnit(e.target.value)}/>\r\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Button onClick={event => handleUpdate(event)} size='sm' variant='success'\r\n                        style={{width: '100%', padding: '10px'}}>\r\n                    {formTitle.split(' ')[0]}\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\nexport default SensorForm;\r\n","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\store\\sensors\\actions.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\services\\RestHTTP.ts",["160"],"import axios from \"axios\";\r\n\r\nconst host=\"https://api-server-t2h37jtwmq-uc.a.run.app/api\";\r\n\r\nexport default {\r\n    GET: async (endpoint:string, param:any) => {\r\n        return await axios.get(`${host}${endpoint}`,\r\n            {\r\n                params :param,\r\n                headers:{\r\n                    'Authorization': `Bearer `,\r\n                },\r\n            }\r\n        ).then( response => {\r\n            return response.data;\r\n        }).catch( error=> {\r\n            throw error;\r\n        }).catch(error => {\r\n            throw error;\r\n        })\r\n\r\n    }\r\n}","H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\data-fetch\\env.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\store\\isLoading\\actions.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A Angular with Hasika\\seng22212-assignment1-frontend\\src\\store\\alertHistory\\actions.ts",[],{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":2,"column":16,"nodeType":"167","messageId":"168","endLine":2,"endColumn":24},{"ruleId":"165","severity":1,"message":"169","line":2,"column":26,"nodeType":"167","messageId":"168","endLine":2,"endColumn":30},{"ruleId":"165","severity":1,"message":"170","line":7,"column":9,"nodeType":"167","messageId":"168","endLine":7,"endColumn":12},{"ruleId":"171","severity":1,"message":"172","line":49,"column":1,"nodeType":"173","messageId":"174","endLine":52,"endColumn":2},{"ruleId":"165","severity":1,"message":"175","line":3,"column":9,"nodeType":"167","messageId":"168","endLine":3,"endColumn":19},{"ruleId":"176","severity":1,"message":"177","line":1,"column":1,"nodeType":"178","endLine":8,"endColumn":3},{"ruleId":"165","severity":1,"message":"179","line":2,"column":22,"nodeType":"167","messageId":"168","endLine":2,"endColumn":33},{"ruleId":"165","severity":1,"message":"180","line":8,"column":11,"nodeType":"167","messageId":"168","endLine":8,"endColumn":27},{"ruleId":"181","severity":1,"message":"182","line":8,"column":5,"nodeType":"183","messageId":"184","endLine":10,"endColumn":6},{"ruleId":"165","severity":1,"message":"185","line":13,"column":15,"nodeType":"167","messageId":"168","endLine":13,"endColumn":27},{"ruleId":"186","severity":1,"message":"187","line":72,"column":88,"nodeType":"188","endLine":72,"endColumn":144},{"ruleId":"186","severity":1,"message":"187","line":74,"column":86,"nodeType":"188","endLine":74,"endColumn":120},{"ruleId":"186","severity":1,"message":"187","line":75,"column":79,"nodeType":"188","endLine":75,"endColumn":113},{"ruleId":"186","severity":1,"message":"187","line":76,"column":79,"nodeType":"188","endLine":76,"endColumn":113},{"ruleId":"186","severity":1,"message":"187","line":77,"column":79,"nodeType":"188","endLine":77,"endColumn":131},{"ruleId":"189","severity":1,"message":"190","line":67,"column":8,"nodeType":"191","endLine":67,"endColumn":20,"suggestions":"192"},{"ruleId":"165","severity":1,"message":"193","line":2,"column":9,"nodeType":"167","messageId":"168","endLine":2,"endColumn":20},{"ruleId":"165","severity":1,"message":"194","line":3,"column":8,"nodeType":"167","messageId":"168","endLine":3,"endColumn":13},{"ruleId":"165","severity":1,"message":"195","line":3,"column":16,"nodeType":"167","messageId":"168","endLine":3,"endColumn":20},{"ruleId":"165","severity":1,"message":"196","line":4,"column":19,"nodeType":"167","messageId":"168","endLine":4,"endColumn":33},{"ruleId":"181","severity":1,"message":"182","line":11,"column":5,"nodeType":"183","messageId":"184","endLine":15,"endColumn":6},{"ruleId":"197","severity":1,"message":"198","line":18,"column":84,"nodeType":"199","messageId":"200","endLine":18,"endColumn":86},{"ruleId":"197","severity":1,"message":"198","line":23,"column":71,"nodeType":"199","messageId":"200","endLine":23,"endColumn":73},{"ruleId":"197","severity":1,"message":"198","line":47,"column":46,"nodeType":"199","messageId":"200","endLine":47,"endColumn":48},{"ruleId":"186","severity":1,"message":"187","line":59,"column":70,"nodeType":"188","endLine":60,"endColumn":108},{"ruleId":"201","severity":1,"message":"202","line":10,"column":45,"nodeType":"203","messageId":"204","endLine":10,"endColumn":47},{"ruleId":"165","severity":1,"message":"205","line":17,"column":12,"nodeType":"167","messageId":"168","endLine":17,"endColumn":16},{"ruleId":"176","severity":1,"message":"177","line":5,"column":1,"nodeType":"178","endLine":23,"endColumn":2},"no-native-reassign",["206"],"no-negated-in-lhs",["207"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Nav' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'withRouter' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'NavDropdown' is defined but never used.","'dropdown' is assigned a value but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'alertHistory' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchedSensorSet' and 'getSensorSet'. Either include them or remove the dependency array.","ArrayExpression",["208"],"'signOutUser' is defined but never used.","'index' is defined but never used.","'Line' is defined but never used.","'DropdownButton' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'type' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"209","fix":"210"},"Update the dependencies array to be: [fetchedSensorSet, getSensorSet, sensorType]",{"range":"211","text":"212"},[2454,2466],"[fetchedSensorSet, getSensorSet, sensorType]"]