[{"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\index.tsx":"1","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\App.tsx":"3","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\pages\\Members.tsx":"4","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\pages\\Settings.tsx":"5","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\Footer.tsx":"6","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\Header.tsx":"7","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\pages\\About.tsx":"8","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\pages\\AlertHistory.tsx":"9","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\pages\\Home.tsx":"10","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\pages\\DashBoard.tsx":"11","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\data-fetch\\RestAPITest.ts":"12","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\Sensor.tsx":"13","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\data-fetch\\NoName.tsx":"14","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\SensorForm.tsx":"15","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\data-fetch\\env.ts":"16","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\FirebaseApp.ts":"17","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\firebaseConfig.ts":"18","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\ProtectedRoutes.tsx":"19","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\pages\\Login.tsx":"20","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\services\\auth\\auth.ts":"21"},{"size":659,"mtime":1609343589562,"results":"22","hashOfConfig":"23"},{"size":440,"mtime":1609333713953,"results":"24","hashOfConfig":"23"},{"size":1421,"mtime":1609345988309,"results":"25","hashOfConfig":"23"},{"size":4414,"mtime":1609333713949,"results":"26","hashOfConfig":"23"},{"size":4021,"mtime":1609333713949,"results":"27","hashOfConfig":"23"},{"size":365,"mtime":1609333713946,"results":"28","hashOfConfig":"23"},{"size":2858,"mtime":1609333713947,"results":"29","hashOfConfig":"23"},{"size":349,"mtime":1609333713948,"results":"30","hashOfConfig":"23"},{"size":309,"mtime":1609333713948,"results":"31","hashOfConfig":"23"},{"size":2143,"mtime":1609333713948,"results":"32","hashOfConfig":"23"},{"size":5753,"mtime":1609333713948,"results":"33","hashOfConfig":"23"},{"size":2441,"mtime":1609333713951,"results":"34","hashOfConfig":"23"},{"size":2145,"mtime":1609333713947,"results":"35","hashOfConfig":"23"},{"size":654,"mtime":1609333713951,"results":"36","hashOfConfig":"23"},{"size":6852,"mtime":1609333713947,"results":"37","hashOfConfig":"23"},{"size":70,"mtime":1609333713952,"results":"38","hashOfConfig":"23"},{"size":184,"mtime":1609343589557,"results":"39","hashOfConfig":"23"},{"size":329,"mtime":1609348393041,"results":"40","hashOfConfig":"23"},{"size":758,"mtime":1609343589557,"results":"41","hashOfConfig":"23"},{"size":5513,"mtime":1609348417990,"results":"42","hashOfConfig":"23"},{"size":765,"mtime":1609343589565,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1j12i9c",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"53"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"53"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\index.tsx",[],["93","94"],"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\App.tsx",[],"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\pages\\Members.tsx",[],["95","96"],"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\pages\\Settings.tsx",["97"],"import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Button, Container,} from \"react-bootstrap\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Swal from 'sweetalert2';\r\nimport {ISensor} from \"../../types/types\";\r\nimport {API} from \"../../data-fetch/RestAPITest\";\r\nimport Sensor from \"../Sensor\";\r\nimport SensorForm from \"../SensorForm\";\r\n\r\nconst Settings: React.FC = () => {\r\n    document.title = 'weatherApp | settings';\r\n    const history = useHistory();\r\n    const [sensorType, setSensorType] = useState('');\r\n    const [sensorSet, setSensorSet] = useState<ISensor[]>([]);\r\n    const [isAdd, setIsAdd] = useState(false);\r\n    const sensorCategories = JSON.parse(localStorage.getItem(\"SensorCategories\") as string);\r\n\r\n    const handleSignOut = () => {\r\n        const swalWithBootstrapButtons = Swal.mixin({\r\n            customClass: {\r\n                confirmButton: 'btn btn-success',\r\n                cancelButton: 'btn btn-danger'\r\n            },\r\n            buttonsStyling: false\r\n        })\r\n\r\n        swalWithBootstrapButtons.fire({\r\n            title: 'Are you sure to sign out?',\r\n            text: \"You'll need sign in to use this!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes, sign out me!',\r\n            cancelButtonText: 'No, cancel!',\r\n            reverseButtons: true\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                swalWithBootstrapButtons.fire(\r\n                    'Sign out!',\r\n                    'You have been sign out successfully.',\r\n                    'success'\r\n                )\r\n                localStorage.setItem('IS_LOGGED_IN', 'false');\r\n                history.push('/signin');\r\n            } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n                swalWithBootstrapButtons.fire(\r\n                    'Cancelled',\r\n                    'Your imaginary login is safe :)',\r\n                    'error'\r\n                )\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    let fetchedSensorSet: ISensor[];\r\n    const getSensorSet = async () => {\r\n        const r = await API.GET(`/sensor?sensorType=${sensorType.toUpperCase()}`);\r\n        fetchedSensorSet = r;\r\n        return r;\r\n    }\r\n\r\n    useEffect(() => {\r\n        getSensorSet().then(() => {\r\n            let sensors = fetchedSensorSet.map((sen: ISensor) => sen);\r\n            setSensorSet(sensors);\r\n        })\r\n    }, [sensorType])\r\n\r\n    return (\r\n        <Container className='min-vh-100'>\r\n            <br/><br/><br/>\r\n            <h2>Settings</h2>\r\n            <br/>\r\n            <div><h3>Sensor manage</h3>\r\n\r\n                <select name=\"sensors\" id=\"sensors\"\r\n                        onChange={(e: ChangeEvent<HTMLSelectElement>) => setSensorType(e.target.value)}>\r\n                    <option value=\" \">Select Sensor category</option>\r\n                    {\r\n                        sensorCategories.map((sensorCategory: string, index:number) =>\r\n                            <option key={index} value={sensorCategory}>{sensorCategory}</option>)}\r\n                </select>\r\n                {\r\n                    sensorSet.map((sensor: ISensor, index: number) => <Sensor sensor={sensor} num={index + 1}\r\n                                                                              key={index}/>)\r\n                }\r\n\r\n            </div>\r\n            <div><h3 onClick={() => setIsAdd(true)} style={{cursor: 'pointer'}}><i className=\"feather-plus-circle\"/> Add\r\n                new sensor</h3>\r\n                {\r\n                    isAdd &&\r\n                    <SensorForm formTitle={\"Add Sensor\"} sensor={{title: '', id: '', threshold: 0, type: '', unit: ''}}\r\n                                setIsUpdatable={setIsAdd}/>\r\n                }\r\n            </div>\r\n\r\n            <div><h3>Sign out</h3></div>\r\n            <Button className='p-button mt-3' onClick={handleSignOut}>Sign out</Button>\r\n            <br/><br/>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Settings;\r\n","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\Footer.tsx",[],"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\Header.tsx",[],"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\pages\\About.tsx",[],"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\pages\\AlertHistory.tsx",[],"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\pages\\Home.tsx",[],"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\pages\\DashBoard.tsx",["98","99"],"import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Line} from \"react-chartjs-2\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport {API} from \"../../data-fetch/RestAPITest\";\r\nimport {SensorMeta, sensorRecode} from \"../../types/types\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst DashBoard: React.FC = () => {\r\n    document.title = 'weatherApp | Dashboard'\r\n    let {sensor}: any = useParams();\r\n    let icon = (sensor === 'temperature') ? \"feather-thermometer\" : (sensor === \"rain\") ? \"feather-cloud-rain\" :\r\n        (sensor === 'wind') ? \"feather-wind\" : \"feather-cloud\";\r\n    let day = new Date(Date.now() - 86400000 * 40);\r\n    const [startDate, setStartDate] = useState(day.toISOString().slice(0, 10));\r\n    const [endDate, setEndDate] = useState(new Date().toISOString().slice(0, 10));\r\n    const onChangeStartHandle = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStartDate(e.target.value);\r\n    };\r\n    const onChangeEndHandle = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setEndDate(e.target.value);\r\n    };\r\n    const [sensorData, setSensorData] = useState<any>({labels: [], datasets: [], options: []});\r\n    const [lastRead, setLastRead] = useState<any>('');\r\n    const [sensorId, setSensorId] = useState<any>('');\r\n    const [sensorSet, setSensorSet] = useState<SensorMeta[]>([]);\r\n\r\n    let fetchedSensorSet: SensorMeta[];\r\n    const getSensorSet = async () => {\r\n        const r = await API.GET(`/sensor?sensorType=${sensor.toUpperCase()}`);\r\n        fetchedSensorSet = r;\r\n        return r;\r\n    }\r\n\r\n    useEffect(() => {\r\n        getSensorSet().then(() => {\r\n            let sensors = fetchedSensorSet.map((sen: SensorMeta) => sen);\r\n            setSensorSet(sensors);\r\n        })\r\n\r\n        if (sensor !== \"temperature\") {\r\n            Swal.fire('Sorry. Those type of sensors does not have setup.  ' +\r\n                'Temperature sensors only have been set up.');\r\n        } else {\r\n            Swal.fire('Please select the sensor and time range as you wish');\r\n        }\r\n    }, [sensor])\r\n\r\n    let fetchedDataSet: sensorRecode[];\r\n    const getRecord = async () => {\r\n        const r = await API.GET(`/data?sensorId=${sensorId}&from=${startDate}&to=${endDate}`);\r\n        fetchedDataSet = r;\r\n        return r\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRecord().then(() => {\r\n            let val = fetchedDataSet[fetchedDataSet.length - 1].dataValue;\r\n            let data = {\r\n                labels: fetchedDataSet.map((recode) => `${new Date(recode.capturedDate).getDate()}d-${new Date(recode.capturedDate).getHours()}:${new Date(recode.capturedDate).getMinutes()}h`),\r\n                datasets: [\r\n                    {\r\n                        label: sensor,\r\n                        data: fetchedDataSet.map((recode) => recode.dataValue),\r\n                        fill: false,\r\n                        borderColor: (sensor === 'wind') ? '#0d8c1a' : (sensor === 'temperature') ? '#ac1010' :\r\n                            (sensor === 'rain') ? '#0824b3' : '#13caaf'\r\n                    }\r\n                ],\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                }\r\n            };\r\n            setSensorData(data);\r\n            setLastRead(val);\r\n        })\r\n\r\n    }, [startDate, endDate, sensorId])\r\n\r\n    return (\r\n        <Container className='dashboard min-vh-100'>\r\n            <br/><br/>\r\n            <h2 className='pt-4 text-left'>Dashboard</h2>\r\n            <div className='p-dashboard-line'>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={4}>\r\n                        <i className={icon}/>\r\n                        <select name=\"sensors\" id=\"sensors\"\r\n                                onChange={(e: ChangeEvent<HTMLSelectElement>) => setSensorId(e.target.value)}>\r\n                            <option value=\" \">Select Sensor</option>\r\n                            {sensorSet.map((value: SensorMeta, index:number) => <option key={index} value={value.id}>{value.title}</option>)}\r\n                        </select>\r\n                    </Col>\r\n                    <Col xs={12} sm={6} md={4}>\r\n                        <span className='float-left'>From:- </span>\r\n                        <input className='float-left' type=\"date\" id=\"start-date\" name=\"start_date\"\r\n                               onChange={onChangeStartHandle}\r\n                               placeholder=\"\" value={startDate ? startDate : ''}/>\r\n                    </Col>\r\n                    <Col xs={12} sm={6} md={4}>\r\n                        <span className='float-left'> To:- </span>\r\n                        <input className='float-left' type=\"date\" id=\"end-date\" name=\"end_date\"\r\n                               onChange={onChangeEndHandle}\r\n                               placeholder=\"\" value={endDate ? endDate : ''}/>\r\n                    </Col>\r\n                </Row>\r\n                <br/>\r\n                <div className='float-right pr-4'>\r\n                    <span className='float-left'>Last read value - </span>\r\n                    <span className='float-left'>{lastRead}</span>\r\n                </div>\r\n            </div>\r\n            <div className='d-none d-md-block d-lg-none'><Line data={sensorData} width={100} height={50}/></div>\r\n            <div className='d-none d-lg-block'><Line data={sensorData} width={100} height={35}/></div>\r\n            <div className='d-none d-sm-block d-md-none'><Line data={sensorData} width={100} height={70}/></div>\r\n            <div className='d-sm-none'><Line data={sensorData} width={90} height={100}/></div>\r\n            <br/><br/>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default DashBoard;\r\n","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\data-fetch\\RestAPITest.ts",[],"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\Sensor.tsx",[],"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\data-fetch\\NoName.tsx",[],"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\SensorForm.tsx",["100"],"import React, {ChangeEvent, FormEvent, useState} from \"react\";\r\nimport {Button, Col, Form, Row} from \"react-bootstrap\";\r\nimport {ISensor,} from \"../types/types\";\r\nimport Swal from \"sweetalert2\";\r\n\r\ntype UpdateSensorProps = {\r\n    sensor: ISensor;\r\n    formTitle: string;\r\n    setIsUpdatable: (arg: boolean) => void\r\n}\r\n\r\nconst SensorForm: React.FC<UpdateSensorProps> = (props) => {\r\n    const {sensor, formTitle} = props;\r\n    const [id, setId] = useState(sensor.id);\r\n    const [title, setTitle] = useState(sensor.title);\r\n    const [threshold, setThreshold] = useState(sensor.threshold);\r\n    const [type, setType] = useState(sensor.type);\r\n    const [unit, setUnit] = useState(sensor.unit)\r\n    const [validated, setValidated] = useState(false);\r\n    const sensorCategories = JSON.parse(localStorage.getItem(\"SensorCategories\") as string);\r\n\r\n    const handleUpdate = (event: FormEvent) => {\r\n        const form = event.currentTarget;\r\n        // @ts-ignore\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        } else if (title !== null && id !== null && title !== '' && id !== '') {\r\n            setValidated(false);\r\n            Swal.fire({\r\n                title: 'Do you want to save the changes?',\r\n                showDenyButton: true,\r\n                showCancelButton: true,\r\n                confirmButtonText: `Save`,\r\n                denyButtonText: `Don't save`,\r\n            }).then((result) => {\r\n                /* Read more about isConfirmed, isDenied below */\r\n                if (result.isConfirmed) {\r\n                    Swal.fire('Saved!', '', 'success');\r\n\r\n                    if (formTitle.split(' ')[0] === 'Add') {\r\n                        //TODO: add sensor function here.\r\n\r\n                    } else {\r\n                        //TODO: create sensor update function here\r\n                    }\r\n\r\n                    props.setIsUpdatable(false)\r\n                } else if (result.isDenied) {\r\n                    Swal.fire('Changes are not saved', '', 'info')\r\n                    props.setIsUpdatable(false)\r\n                }\r\n            })\r\n        } else {\r\n            setValidated(true);\r\n        }\r\n\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"my-4 p-3 \"\r\n             style={{maxWidth: '400px', border: '1px solid gray', margin: \"auto\", borderRadius: '10px'}}>\r\n            <Form.Row>\r\n                <Col className=\"pl-1 mb-3\">\r\n                    <strong style={{textDecoration: 'underline'}}>{formTitle}</strong>\r\n\r\n                    <i className='feather-x-circle text-dark float-right' onClick={() => props.setIsUpdatable(false)}/>\r\n                </Col>\r\n            </Form.Row>\r\n            <Form noValidate validated={validated}>\r\n\r\n                <Form.Row>\r\n                    <Form.Group className=\"form-group-dev\">\r\n                        <Form.Label className=\"text-left label-text\">Title of Sensor</Form.Label>\r\n                        <Form.Control required type=\"text\" className=\"form-input\" placeholder=\"\"\r\n                                      value={title ? title : ''}\r\n                                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTitle(e.target.value)}/>\r\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group className=\"form-group-dev\">\r\n                        <Form.Label className=\" label-text \">Sensor Id</Form.Label>\r\n                        <Form.Control className=\"form-input\" required type=\"text\" placeholder=\"\" value={id ? id : ''}\r\n                                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setId(e.target.value)}/>\r\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Group className=\"form-group-dev\">\r\n                        <Form.Label className=\"text-left label-text\">Threshold</Form.Label>\r\n                        <Row>\r\n                            <Col xs={8} sm={8}>\r\n                                <Form.Control className=\"form-input\" required type=\"range\" placeholder=\"\"\r\n                                              value={threshold ? threshold : ''}\r\n                                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setThreshold(Number(e.target.value))}/>\r\n                            </Col>\r\n                            <Col xs={4} sm={4}>\r\n                                <Form.Control className=\"form-input\" required type=\"text\" placeholder=\"\"\r\n                                              value={threshold ? threshold : ''}\r\n                                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setThreshold(Number(e.target.value))}/>\r\n                            </Col>\r\n                        </Row>\r\n\r\n\r\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Label className=\"text-left Sensor-label\">Sensor type</Form.Label>\r\n                    <Form.Group controlId=\"SensorSelectID\" className=\"form-group-dev\">\r\n                        <br/>\r\n                        <select name=\"sensors\" id=\"sensors\"\r\n                                onChange={(e: ChangeEvent<HTMLSelectElement>) => setType(e.target.value)}>\r\n                            {\r\n                                sensorCategories.map((sensorCategory: string, index:number) =>\r\n                                    <option key={index} value={sensorCategory}>{sensorCategory}</option>)}\r\n                        </select>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Group className=\"form-group-dev\">\r\n                        <Form.Label className=\"text-left label-text\">Sensor unit</Form.Label>\r\n                        <Form.Control className=\"form-input\" required type=\"text\" placeholder=\"\"\r\n                                      value={unit ? unit : ''}\r\n                                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUnit(e.target.value)}/>\r\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Button onClick={event => handleUpdate(event)} size='sm' variant='success'\r\n                        style={{width: '100%', padding: '10px'}}>\r\n                    {formTitle.split(' ')[0]}\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\nexport default SensorForm;\r\n","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\data-fetch\\env.ts",[],"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\FirebaseApp.ts",[],"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\firebaseConfig.ts",["101"],"export default {\r\n    apiKey: \"AIzaSyD7p4qs_W25Dnu7XUj354SObDrFBNagabY\",\r\n    authDomain: \"seng22212-assignment-1.firebaseapp.com\",\r\n    projectId: \"seng22212-assignment-1\",\r\n    storageBucket: \"seng22212-assignment-1.appspot.com\",\r\n    messagingSenderId: \"77647971611\",\r\n    appId: \"1:77647971611:web:8b34537460983f39867fbe\"\r\n};","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\ProtectedRoutes.tsx",[],"C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\components\\pages\\Login.tsx",["102","103","104"],"import React from \"react\";\r\nimport {userLogin} from \"../../services/auth/auth\";\r\nimport {RouteProps} from 'react-router';\r\n\r\n\r\nclass Login extends React.Component<RouteProps,{[key:string]:any}>{\r\n    constructor(props:any) {\r\n        super(props);\r\n\r\n        this.state={\r\n            email:\"\",\r\n            password:\"\",\r\n            stayLogged:false\r\n        }\r\n    }\r\n\r\n    handleOnSubmit = (event: { preventDefault: () => void; }) => {\r\n        event.preventDefault();\r\n        userLogin(this.state.email, this.state.password, this.state.stayLogged).then(\r\n            e=>console.log(\"user logged\")).catch((e)=>alert(e));\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div className=\"bg-gradient-primary\" style={{background:\" rgb(255,145,77)\"}}>\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div\r\n                        className=\"col-md-9 col-lg-12 col-xl-10 d-flex flex-column justify-content-center align-content-center align-self-center\">\r\n                        <div className=\"card shadow-lg o-hidden border-0 my-5\" style={{marginTop:\"60px\"}}>\r\n                            <div className=\"card-body p-0\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-lg-6 col-xl-6 d-none d-lg-flex\">\r\n                                        <div className=\"flex-grow-1 bg-login-image\"\r\n                                             style={{background:\"url(src\\assets\\images\\Monitor.png)\"}}/>\r\n                                    </div>\r\n                                    <div className=\"col-lg-6\">\r\n                                        <div className=\"p-5\">\r\n                                            <div className=\"text-center\">\r\n                                                <h4 className=\"text-dark mb-4\">Welcome Back!</h4>\r\n                                            </div>\r\n                                            <form className=\"user\" onSubmit={(e)=>this.handleOnSubmit(e)}>\r\n                                                <div className=\"form-group\"><input\r\n                                                    className=\"form-control form-control-user\" type=\"email\"\r\n                                                    id=\"exampleInputEmail\" aria-describedby=\"emailHelp\"\r\n                                                    placeholder=\"Enter Email Address...\" name=\"email\"\r\n                                                    value={this.state.email}\r\n                                                    onChange={\r\n                                                        (event)=>this.setState({email:event.target.value})\r\n                                                    }\r\n                                                /></div>\r\n                                                <div className=\"form-group\"><input\r\n                                                    className=\"form-control form-control-user\" type=\"password\"\r\n                                                    id=\"exampleInputPassword\" placeholder=\"Password\" name=\"password\"\r\n                                                    value={this.state.password}\r\n                                                    onChange={(event)=>this.setState({password:event.target.value})}\r\n                                                />\r\n                                                </div>\r\n                                                <div className=\"form-group\">\r\n                                                    <div className=\"custom-control custom-checkbox small\">\r\n                                                        <div className=\"form-check\"><input\r\n                                                            className=\"form-check-input custom-control-input\"\r\n                                                            type=\"checkbox\" id=\"formCheck-1\"\r\n                                                                onChange={()=>this.setState({stayLogged:!this.state.stayLogged})}\r\n                                                        /><label\r\n                                                            className=\"form-check-label custom-control-label\"\r\n                                                            htmlFor=\"formCheck-1\">Remember Me</label></div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <button className=\"btn btn-primary btn-block text-white btn-user\"\r\n                                                        type=\"submit\" style={{background:\" rgb(255,145,77)\"}}>Login\r\n                                                </button>\r\n                                                <hr/>\r\n                                                    <hr/>\r\n                                            </form>\r\n                                            <div className=\"text-center\"><a className=\"small\"\r\n                                                                            href=\"forgot-password.html\">Forgot\r\n                                                Password?</a></div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n                </div>;\r\n    }\r\n}\r\n\r\nexport default Login;","C:\\Users\\hp\\Desktop\\seng22212-assignment1-frontend\\src\\services\\auth\\auth.ts",[],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"105","replacedBy":"109"},{"ruleId":"107","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":67,"column":8,"nodeType":"113","endLine":67,"endColumn":20,"suggestions":"114"},{"ruleId":"111","severity":1,"message":"112","line":47,"column":8,"nodeType":"113","endLine":47,"endColumn":16,"suggestions":"115"},{"ruleId":"111","severity":1,"message":"116","line":79,"column":8,"nodeType":"113","endLine":79,"endColumn":38,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":17,"column":12,"nodeType":"120","messageId":"121","endLine":17,"endColumn":16},{"ruleId":"122","severity":1,"message":"123","line":1,"column":1,"nodeType":"124","endLine":8,"endColumn":3},{"ruleId":"125","severity":1,"message":"126","line":35,"column":73,"nodeType":"127","messageId":"128","endLine":35,"endColumn":74,"suggestions":"129"},{"ruleId":"125","severity":1,"message":"130","line":35,"column":80,"nodeType":"127","messageId":"128","endLine":35,"endColumn":81,"suggestions":"131"},{"ruleId":"125","severity":1,"message":"132","line":35,"column":87,"nodeType":"127","messageId":"128","endLine":35,"endColumn":88,"suggestions":"133"},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],["134"],["135"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchedSensorSet' and 'getSensorSet'. Either include them or remove the dependency array.","ArrayExpression",["136"],["137"],"React Hook useEffect has missing dependencies: 'fetchedDataSet', 'getRecord', and 'sensor'. Either include them or remove the dependency array.",["138"],"@typescript-eslint/no-unused-vars","'type' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-useless-escape","Unnecessary escape character: \\a.","Literal","unnecessaryEscape",["139","140"],"Unnecessary escape character: \\i.",["141","142"],"Unnecessary escape character: \\M.",["143","144"],"no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"messageId":"151","fix":"152","desc":"153"},{"messageId":"154","fix":"155","desc":"156"},{"messageId":"151","fix":"157","desc":"153"},{"messageId":"154","fix":"158","desc":"156"},{"messageId":"151","fix":"159","desc":"153"},{"messageId":"154","fix":"160","desc":"156"},"Update the dependencies array to be: [fetchedSensorSet, getSensorSet, sensorType]",{"range":"161","text":"162"},"Update the dependencies array to be: [fetchedSensorSet, getSensorSet, sensor]",{"range":"163","text":"164"},"Update the dependencies array to be: [startDate, endDate, sensorId, getRecord, fetchedDataSet, sensor]",{"range":"165","text":"166"},"removeEscape",{"range":"167","text":"168"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"169","text":"170"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"171","text":"168"},{"range":"172","text":"170"},{"range":"173","text":"168"},{"range":"174","text":"170"},[2448,2460],"[fetchedSensorSet, getSensorSet, sensorType]",[2098,2106],"[fetchedSensorSet, getSensorSet, sensor]",[3372,3402],"[startDate, endDate, sensorId, getRecord, fetchedDataSet, sensor]",[1495,1496],"",[1495,1495],"\\",[1502,1503],[1502,1502],[1509,1510],[1509,1509]]