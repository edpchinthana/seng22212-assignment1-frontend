[{"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\index.tsx":"1","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\reportWebVitals.ts":"2","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\App.tsx":"3","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\Header.tsx":"4","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Members.tsx":"5","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Settings.tsx":"6","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Home.tsx":"7","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\AlertHistory.tsx":"8","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\About.tsx":"9","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\SignUp.tsx":"10","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Signin.tsx":"11","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\DashBoard.tsx":"12","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\Footer.tsx":"13","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\RestAPITest.ts":"14","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\env.ts":"15","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\NoName.tsx":"16"},{"size":547,"mtime":1608265659457,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":2517,"mtime":1608359235406,"results":"20","hashOfConfig":"18"},{"size":2602,"mtime":1609210486721,"results":"21","hashOfConfig":"18"},{"size":4396,"mtime":1608769474192,"results":"22","hashOfConfig":"18"},{"size":1843,"mtime":1608738535410,"results":"23","hashOfConfig":"18"},{"size":1972,"mtime":1608362616073,"results":"24","hashOfConfig":"18"},{"size":310,"mtime":1608362616158,"results":"25","hashOfConfig":"18"},{"size":347,"mtime":1609203949007,"results":"26","hashOfConfig":"18"},{"size":4811,"mtime":1608362616164,"results":"27","hashOfConfig":"18"},{"size":4218,"mtime":1609208459547,"results":"28","hashOfConfig":"18"},{"size":5289,"mtime":1609205693457,"results":"29","hashOfConfig":"18"},{"size":326,"mtime":1608359827275,"results":"30","hashOfConfig":"18"},{"size":2441,"mtime":1609203949005,"results":"31","hashOfConfig":"18"},{"size":70,"mtime":1609203949006,"results":"32","hashOfConfig":"18"},{"size":623,"mtime":1609203949004,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"lpfsp2",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\index.tsx",[],["72","73"],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\reportWebVitals.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\App.tsx",["74"],"import React from 'react';\nimport './App.css';\nimport Header from \"./Header\";\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport Members from \"./pages/Members\";\nimport Settings from \"./pages/Settings\";\nimport AlertHistory from \"./pages/AlertHistory\";\nimport About from \"./pages/About\";\nimport Home from \"./pages/Home\";\nimport './aserts/style-sheets/main.scss'\nimport Signin from \"./pages/Signin\";\nimport SignUp from \"./pages/SignUp\";\nimport DashBoard from \"./pages/DashBoard\";\nimport {GuardedRoute, GuardProvider} from \"react-router-guards\";\nimport Footer from \"./Footer\";\nconst getIsLoggedIn = () => localStorage.getItem('IS_LOGGED_IN') === 'true';\n\n\nfunction App() {\n    const requireLogin = (to: any, from: any, next: any) => {\n        if (to.meta.auth) {\n            if (getIsLoggedIn()) {\n                next();\n            }\n            next.redirect('/signin');\n        } else {\n            next();\n        }\n    };\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Header/>\n                <GuardProvider guards={[requireLogin]} loading={Home} error={Signin}>\n                    <Switch>\n                        <GuardedRoute path='/about' meta={{auth: true}}>\n                            <About/>\n                        </GuardedRoute>\n                        <GuardedRoute path='/members' meta={{auth: true}}>\n                            <Members/>\n                        </GuardedRoute>\n                        <GuardedRoute path='/settings' meta={{auth: true}}>\n                            <Settings/>\n                        </GuardedRoute>\n                        <GuardedRoute path='/alert-history' meta={{auth: true}}>\n                            <AlertHistory/>\n                        </GuardedRoute>\n                        <GuardedRoute path='/signin'meta={{auth: false}}>\n                            <Signin/>\n                        </GuardedRoute>\n                        <GuardedRoute path='/signup'>\n                            <SignUp/>\n                        </GuardedRoute>\n                        <GuardedRoute path='/dashboard/:sensor' meta={{auth: true}}>\n                            <DashBoard/>\n                        </GuardedRoute>\n                        <GuardedRoute path='/'>\n                            <Home/>\n                        </GuardedRoute>\n                    </Switch>\n                </GuardProvider>\n                <Footer/>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\Header.tsx",["75","76","77"],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Members.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Settings.tsx",["78"],"import React from 'react';\r\nimport {Button, Col} from \"react-bootstrap\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Swal from 'sweetalert2';\r\n\r\nconst Settings: React.FC = () => {\r\n    document.title = 'weatherApp | settings';\r\n    const history = useHistory();\r\n\r\n    const handleSignOut = () => {\r\n        const swalWithBootstrapButtons = Swal.mixin({\r\n            customClass: {\r\n                confirmButton: 'btn btn-success',\r\n                cancelButton: 'btn btn-danger'\r\n            },\r\n            buttonsStyling: false\r\n        })\r\n\r\n        swalWithBootstrapButtons.fire({\r\n            title: 'Are you sure to sign out?',\r\n            text: \"You'll need sign in to use this!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes, sign out me!',\r\n            cancelButtonText: 'No, cancel!',\r\n            reverseButtons: true\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                swalWithBootstrapButtons.fire(\r\n                    'Sign out!',\r\n                    'You have been sign out successfully.',\r\n                    'success'\r\n                )\r\n                localStorage.setItem('IS_LOGGED_IN', 'false');\r\n                history.push('/signin');\r\n            } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n                swalWithBootstrapButtons.fire(\r\n                    'Cancelled',\r\n                    'Your imaginary login is safe :)',\r\n                    'error'\r\n                )\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div  className='min-vh-100'>\r\n            <br/><br/><br/>\r\n            <h2>Settings</h2>\r\n            <br/>\r\n            <Button className='p-button mt-3' onClick={handleSignOut}>Sign out</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Home.tsx",["79","80","81","82"],"import React from 'react';\r\nimport {Carousel} from \"react-bootstrap\";\r\nimport wind from '../aserts/images/wind.jpg';\r\nimport mist from '../aserts/images/mist.jpg';\r\nimport thunder from '../aserts/images/thunder.jpg';\r\nimport measure from '../aserts/images/mesure.jpg';\r\n\r\nconst Home: React.FC = () => {\r\n    document.title = 'weatherApp | home'\r\n    return (\r\n        <div className='min-vh-100'>\r\n            <br/><br/>\r\n            <h2 className='pt-4'>Weather App 2020</h2>\r\n\r\n            <Carousel>\r\n                <Carousel.Item interval={1000}>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={measure}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Daily Temperature</h3>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item interval={500}>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={thunder}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Daily Rain records</h3>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={wind}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Daily wind records</h3>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={mist}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Daily humidity records</h3>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n            </Carousel>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\AlertHistory.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\About.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\SignUp.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Signin.tsx",["83"],"import React, {FormEvent, useState} from 'react';\r\nimport {Button, CardImg, Col, Row, Form} from \"react-bootstrap\";\r\nimport image from '../aserts/images/user-icon-image.svg'\r\nimport {useHistory, Link} from \"react-router-dom\";\r\nimport Swal from 'sweetalert2';\r\nimport {API} from \"../data-fetch/RestAPITest\";\r\n\r\nconst Signin: React.FC = () => {\r\n    document.title = 'weatherApp | sign in'\r\n    const history = useHistory();\r\n    const [userName, setUserName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isActiveUserName, setIsActiveUserName] = useState(false);\r\n    const [isActivePassword, setIsActivePassword] = useState(false);\r\n    const getIsLoggedIn = () => localStorage.getItem('IS_LOGGED_IN') === 'true';\r\n    if (getIsLoggedIn()) {\r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text: 'You already have sign in!',\r\n            footer: `If you need to sign out, go - <a href='/settings'> settings</Link>`\r\n        })\r\n        history.push('/');\r\n    }\r\n    const handleNameOnCardChange = (text: string) => {\r\n        setUserName(text);\r\n        (text !== '') ? setIsActiveUserName(true) : setIsActiveUserName(false);\r\n    };\r\n    const handlePasswordChange = (text: string) => {\r\n        setPassword(text);\r\n        (text !== '') ? setIsActivePassword(true) : setIsActivePassword(false);\r\n    }\r\n\r\n    const handleONSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        // const getSensorCategories = async ()=>{\r\n        //     const sensorCategories= await API.GET(`/category`);\r\n        //     console.log(sensorCategories)\r\n        //     return sensorCategories;\r\n        // }\r\n        //TODO put fetched data into sensors variable.\r\n        const sensors = [\"Temperature\", \"Rain\", \"Wind\", \"Humidity\"]\r\n\r\n        //Todo: Create submit function here\r\n\r\n        if (userName === \"Padma\" && password === \"1234\") {\r\n            localStorage.setItem('IS_LOGGED_IN', 'true');\r\n            localStorage.setItem('SensorCategories',JSON.stringify(sensors))\r\n            history.push('/');\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className=\"px-2 py-3 px-md-3 py-md-5 min-vh-100\">\r\n            <br/><br/>\r\n            <Form className=\"p-form\" onSubmit={handleONSubmit}>\r\n                <h2>Sign in</h2>\r\n                <Row>\r\n                    <Col>\r\n                        <CardImg className='user-image' src={image}/>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <div className=\"float-label my-2\">\r\n                            <input type=\"text\" value={userName}\r\n                                   onChange={(e) => handleNameOnCardChange(e.target.value)}/>\r\n                            <label className={isActiveUserName ? \"Active\" : \"\"} htmlFor=\"username\"> Username\r\n                            </label>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <div className=\"float-label my-2\">\r\n                            <input type=\"text\" value={password}\r\n                                   onChange={(e) => handlePasswordChange(e.target.value)}/>\r\n                            <label className={isActivePassword ? \"Active\" : \"\"} htmlFor=\"password\">Password\r\n                            </label>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Button className='p-button mt-3' type='submit'>Sign in</Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Link className='float-right mb-3' to='/help-me'>Forget your password?</Link>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <span>Not a member? </span>\r\n                        <Link to='/signup'>Sign up here</Link>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Signin;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\DashBoard.tsx",["84","85"],"import React, {useState} from 'react';\r\nimport {Line} from \"react-chartjs-2\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport {API} from \"../data-fetch/RestAPITest\";\r\n\r\nconst DashBoard: React.FC = () => {\r\n    document.title = 'weatherApp | Dashboard'\r\n    let {sensor}: any = useParams();\r\n    let icon = (sensor === 'temperature') ? \"feather-thermometer\" : (sensor === \"rain\") ? \"feather-cloud-rain\" : (sensor === 'wind') ? \"feather-wind\" : \"feather-cloud\";\r\n    // let dropdown = \"Outdoor temperature\";\r\n    let sensorSet = ['Temperature', 'rain', 'humidity'];\r\n\r\n    let day = new Date(Date.now() - 86400000*20);\r\n    const [startDate, setStartDate]=useState(day.toISOString().slice(0, 10))\r\n    const [endDate, setEndDate]=useState(new Date().toISOString().slice(0, 10))\r\n    const onChangeStartHandle =  (e: React.ChangeEvent<HTMLInputElement>) => {setStartDate(e.target.value);}\r\n    const onChangeEndHandle =  (e: React.ChangeEvent<HTMLInputElement>) => {setEndDate(e.target.value);}\r\n\r\n    type record = {\r\n        time: number,\r\n        value: number\r\n    }\r\n\r\n    let categoryList;\r\n\r\n    let sensorId='0cbf24d4-0105-4719-a56a-4e6c3cc4def1';\r\n\r\n    const getRecord = async ()=>{\r\n        const r= await API.GET(`/data?sensorId=${sensorId}&from=${startDate}&to=${endDate}`);\r\n        console.log(r)\r\n        // this.setState({categoryList:r})\r\n    }\r\n    // getRecord()\r\n\r\n\r\n\r\n\r\n\r\n    //Todo: add json data into this constants.\r\n    const temperature: record[] = [{time: 0, value: 34}, {time: 2, value: 36}, {time: 4, value: 28}, {\r\n        time: 6,\r\n        value: 30\r\n    }, {time: 8, value: 28}, {time: 10, value: 27}, {time: 12, value: 30}, {time: 14, value: 28}, {\r\n        time: 16,\r\n        value: 28\r\n    }, {time: 18, value: 27}, {time: 20, value: 28}, {time: 22, value: 27}];\r\n    const rain: record[] = [{time: 0, value: 22}, {time: 2, value: 27}, {time: 4, value: 23}, {\r\n        time: 6,\r\n        value: 24\r\n    }, {time: 8, value: 22}, {time: 10, value: 24}, {time: 12, value: 30}, {time: 14, value: 32}, {\r\n        time: 16,\r\n        value: 30\r\n    }, {time: 18, value: 27}, {time: 20, value: 26}, {time: 22, value: 25}];\r\n    const wind: record[] = [{time: 0, value: 34}, {time: 2, value: 36}, {time: 4, value: 44}, {\r\n        time: 6,\r\n        value: 34\r\n    }, {time: 8, value: 58}, {time: 10, value: 45}, {time: 12, value: 34}, {time: 14, value: 34}, {\r\n        time: 16,\r\n        value: 68\r\n    }, {time: 18, value: 65}, {time: 20, value: 58}, {time: 22, value: 45}];\r\n    const humanity: record[] = [{time: 0, value: 34}, {time: 2, value: 36}, {time: 4, value: 44}, {\r\n        time: 6,\r\n        value: 34\r\n    }, {time: 8, value: 38}, {time: 10, value: 35}, {time: 12, value: 20}, {time: 14, value: 17}, {\r\n        time: 16,\r\n        value: 18\r\n    }, {time: 18, value: 15}, {time: 20, value: 28}, {time: 22, value: 25}];\r\n\r\n\r\n    const dType = (sensor === 'wind') ? wind : (sensor === 'temperature') ? temperature : (sensor === 'rain') ? rain : humanity;\r\n\r\n    const val: number = dType[dType.length - 1].value;\r\n\r\n\r\n    const data = {\r\n        labels: dType.slice(Math.max(dType.length - 10, 1)).map((record: record) => record.time.toFixed(2) + 'h'),\r\n        datasets: [\r\n            {\r\n                label: sensor,\r\n                data: dType.slice(Math.max(dType.length - 10, 1)).map((record: record) => record.value),\r\n                fill: false,\r\n                borderColor: (sensor === 'wind') ? '#0d8c1a' : (sensor === 'temperature') ? '#ac1010' : (sensor === 'rain') ? '#0824b3' : '#13caaf'\r\n            }\r\n        ],\r\n        options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <Container className='dashboard min-vh-100'>\r\n            <br/><br/>\r\n            <h2 className='pt-4 text-left'>Dashboard</h2>\r\n            <br/>\r\n            <Container>\r\n                <div className='p-dashboard-line'>\r\n                    <Row>\r\n                        <Col xs={12} sm={12} md={4}>\r\n                            <i className={icon}/>\r\n                            <select name=\"sensors\" id=\"sensors\">\r\n                                {sensorSet.map((value: string) => <option value={value}>{value}</option>)}\r\n                            </select>\r\n                        </Col>\r\n                        <Col xs={12} sm={6} md={4}>\r\n                            <span className='float-left'>From:- </span>\r\n                            <input className='float-left' type=\"date\" id=\"start-date\" name=\"start_date\" onChange={onChangeStartHandle} placeholder=\"\"    value={startDate? startDate: ''}/>\r\n                        </Col>\r\n                        <Col xs={12} sm={6} md={4}>\r\n                            <span className='float-left'> To:- </span>\r\n                            <input className='float-left' type=\"date\" id=\"end-date\" name=\"end_date\" onChange={onChangeEndHandle} placeholder=\"\" value={endDate? endDate: \"\"}/>\r\n                        </Col>\r\n                    </Row>\r\n                    <p>{val}</p>\r\n                </div>\r\n                <Line data={data}/>\r\n            </Container>\r\n            <br/><br/>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default DashBoard;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\Footer.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\RestAPITest.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\env.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\NoName.tsx",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":4,"column":24,"nodeType":"92","messageId":"93","endLine":4,"endColumn":29},{"ruleId":"90","severity":1,"message":"94","line":1,"column":16,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"95","line":4,"column":9,"nodeType":"92","messageId":"93","endLine":4,"endColumn":21},{"ruleId":"90","severity":1,"message":"96","line":10,"column":21,"nodeType":"92","messageId":"93","endLine":10,"endColumn":32},{"ruleId":"90","severity":1,"message":"97","line":2,"column":17,"nodeType":"92","messageId":"93","endLine":2,"endColumn":20},{"ruleId":"98","severity":1,"message":"99","line":17,"column":21,"nodeType":"100","endLine":20,"endColumn":23},{"ruleId":"98","severity":1,"message":"99","line":26,"column":21,"nodeType":"100","endLine":29,"endColumn":23},{"ruleId":"98","severity":1,"message":"99","line":35,"column":21,"nodeType":"100","endLine":38,"endColumn":23},{"ruleId":"98","severity":1,"message":"99","line":44,"column":21,"nodeType":"100","endLine":47,"endColumn":23},{"ruleId":"90","severity":1,"message":"101","line":38,"column":15,"nodeType":"92","messageId":"93","endLine":38,"endColumn":34},{"ruleId":"90","severity":1,"message":"102","line":27,"column":9,"nodeType":"92","messageId":"93","endLine":27,"endColumn":21},{"ruleId":"90","severity":1,"message":"103","line":31,"column":11,"nodeType":"92","messageId":"93","endLine":31,"endColumn":20},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'makeEventKey' is defined but never used.","'setDropdown' is assigned a value but never used.","'Col' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'getSensorCategories' is assigned a value but never used.","'categoryList' is defined but never used.","'getRecord' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]