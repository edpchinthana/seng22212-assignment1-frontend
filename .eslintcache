[{"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\index.tsx":"1","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\reportWebVitals.ts":"2","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\App.tsx":"3","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\Footer.tsx":"4","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Members.tsx":"5","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\About.tsx":"6","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Signin.tsx":"7","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Settings.tsx":"8","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\AlertHistory.tsx":"9","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Home.tsx":"10","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\DashBoard.tsx":"11","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\SignUp.tsx":"12","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\Header.tsx":"13","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\RestAPITest.ts":"14","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\NoName.tsx":"15","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\env.ts":"16"},{"size":547,"mtime":1608265659457,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":2585,"mtime":1609226356984,"results":"20","hashOfConfig":"18"},{"size":326,"mtime":1608359827275,"results":"21","hashOfConfig":"18"},{"size":4396,"mtime":1609226661087,"results":"22","hashOfConfig":"18"},{"size":347,"mtime":1609231566855,"results":"23","hashOfConfig":"18"},{"size":4807,"mtime":1609237237675,"results":"24","hashOfConfig":"18"},{"size":3551,"mtime":1609261316703,"results":"25","hashOfConfig":"18"},{"size":310,"mtime":1609226356989,"results":"26","hashOfConfig":"18"},{"size":1972,"mtime":1608362616073,"results":"27","hashOfConfig":"18"},{"size":5844,"mtime":1609234031166,"results":"28","hashOfConfig":"18"},{"size":5271,"mtime":1609237322460,"results":"29","hashOfConfig":"18"},{"size":2977,"mtime":1609258041666,"results":"30","hashOfConfig":"18"},{"size":2441,"mtime":1609231566852,"results":"31","hashOfConfig":"18"},{"size":623,"mtime":1609231566851,"results":"32","hashOfConfig":"18"},{"size":70,"mtime":1609231566853,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"lpfsp2",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\index.tsx",[],["70","71"],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\reportWebVitals.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\App.tsx",["72"],"import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./Header\";\r\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\r\nimport Members from \"./pages/Members\";\r\nimport Settings from \"./pages/Settings\";\r\nimport AlertHistory from \"./pages/AlertHistory\";\r\nimport About from \"./pages/About\";\r\nimport Home from \"./pages/Home\";\r\nimport './aserts/style-sheets/main.scss'\r\nimport Signin from \"./pages/Signin\";\r\nimport SignUp from \"./pages/SignUp\";\r\nimport DashBoard from \"./pages/DashBoard\";\r\nimport {GuardedRoute, GuardProvider} from \"react-router-guards\";\r\nimport Footer from \"./Footer\";\r\nconst getIsLoggedIn = () => localStorage.getItem('IS_LOGGED_IN') === 'true';\r\n\r\n\r\nfunction App() {\r\n    const requireLogin = (to: any, from: any, next: any) => {\r\n        if (to.meta.auth) {\r\n            if (getIsLoggedIn()) {\r\n                next();\r\n            }\r\n            next.redirect('/signin');\r\n        } else {\r\n            next();\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"App\">\r\n            <BrowserRouter>\r\n                <Header/>\r\n                <GuardProvider guards={[requireLogin]} loading={Home} error={Signin}>\r\n                    <Switch>\r\n                        <GuardedRoute path='/about' meta={{auth: true}}>\r\n                            <About/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/members' meta={{auth: true}}>\r\n                            <Members/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/settings' meta={{auth: true}}>\r\n                            <Settings/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/alert-history' meta={{auth: true}}>\r\n                            <AlertHistory/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/signin'meta={{auth: false}}>\r\n                            <Signin/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/signup'>\r\n                            <SignUp/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/dashboard/:sensor' meta={{auth: true}}>\r\n                            <DashBoard/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/'>\r\n                            <Home/>\r\n                        </GuardedRoute>\r\n                    </Switch>\r\n                </GuardProvider>\r\n                <Footer/>\r\n            </BrowserRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\Footer.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Members.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\About.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Signin.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Settings.tsx",["73","74","75","76","77","78","79"],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\AlertHistory.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Home.tsx",["80","81","82","83"],"import React from 'react';\r\nimport {Carousel} from \"react-bootstrap\";\r\nimport wind from '../aserts/images/wind.jpg';\r\nimport mist from '../aserts/images/mist.jpg';\r\nimport thunder from '../aserts/images/thunder.jpg';\r\nimport measure from '../aserts/images/mesure.jpg';\r\n\r\nconst Home: React.FC = () => {\r\n    document.title = 'weatherApp | home'\r\n    return (\r\n        <div className='min-vh-100'>\r\n            <br/><br/>\r\n            <h2 className='pt-4'>Weather App 2020</h2>\r\n\r\n            <Carousel>\r\n                <Carousel.Item interval={1000}>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={measure}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Daily Temperature</h3>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item interval={500}>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={thunder}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Daily Rain records</h3>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={wind}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Daily wind records</h3>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={mist}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Daily humidity records</h3>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n            </Carousel>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\DashBoard.tsx",["84","85"],"import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Line} from \"react-chartjs-2\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport {API} from \"../data-fetch/RestAPITest\";\r\nimport {sensorMeta, sensorRecode} from \"../types/types\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst DashBoard: React.FC = () => {\r\n    document.title = 'weatherApp | Dashboard'\r\n    let {sensor}: any = useParams();\r\n    let icon = (sensor === 'temperature') ? \"feather-thermometer\" : (sensor === \"rain\") ? \"feather-cloud-rain\" :\r\n        (sensor === 'wind') ? \"feather-wind\" : \"feather-cloud\";\r\n    let day = new Date(Date.now() - 86400000 * 20);\r\n    const [startDate, setStartDate] = useState(day.toISOString().slice(0, 10));\r\n    const [endDate, setEndDate] = useState(new Date().toISOString().slice(0, 10));\r\n    const onChangeStartHandle = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStartDate(e.target.value);\r\n    };\r\n    const onChangeEndHandle = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setEndDate(e.target.value);\r\n    };\r\n    const [sensorData, setSensorData] = useState<any>({labels: [], datasets: [], options: []});\r\n    const [lastRead, setLastRead] = useState<any>('');\r\n    const [sensorId, setSensorId] = useState<any>('');\r\n    const [sensorSet, setSensorSet] = useState<sensorMeta[]>([]);\r\n\r\n    let fetchedSensorSet: sensorMeta[];\r\n    const getSensorSet = async () => {\r\n        const r = await API.GET(`/sensor?sensorType=${sensor.toUpperCase()}`);\r\n        fetchedSensorSet = r;\r\n        return r;\r\n    }\r\n\r\n    useEffect(() => {\r\n        getSensorSet().then(() => {\r\n            let sensors = fetchedSensorSet.map((sen: sensorMeta) => sen);\r\n            setSensorSet(sensors);\r\n        })\r\n\r\n        if(sensor!==\"temperature\"){Swal.fire('Sorry. Those type of sensors does not have setup.  ' +\r\n            'Temperature sensors only have been set up.');}\r\n        else{Swal.fire('Please select the sensor and time range as you wish');}\r\n    }, [sensor])\r\n\r\n    let fetchedDataSet: sensorRecode[];\r\n    const getRecord = async () => {\r\n        const r = await API.GET(`/data?sensorId=${sensorId}&from=${startDate}&to=${endDate}`);\r\n        fetchedDataSet = r;\r\n        return r\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRecord().then(() => {\r\n            let val = fetchedDataSet[fetchedDataSet.length - 1].dataValue;\r\n            let data = {\r\n                // labels: dType.map((record: record) => record.time.toFixed(2) + 'h'),\r\n                labels: fetchedDataSet.map((recode) => `${new Date(recode.capturedDate).getDate()}d-${new Date(recode.capturedDate).getHours()}:${new Date(recode.capturedDate).getMinutes()}h` ),\r\n                // labels: fetchedDataSet.map((recode) => recode.capturedDate),\r\n                datasets: [\r\n                    {\r\n                        label: sensor,\r\n                        data: fetchedDataSet.map((recode) => recode.dataValue),\r\n                        fill: false,\r\n                        borderColor: (sensor === 'wind') ? '#0d8c1a' : (sensor === 'temperature') ? '#ac1010' :\r\n                            (sensor === 'rain') ? '#0824b3' : '#13caaf'\r\n                    }\r\n                ],\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                }\r\n            };\r\n            setSensorData(data);\r\n            setLastRead(val);\r\n        })\r\n\r\n    }, [startDate, endDate, sensorId])\r\n\r\n    return (\r\n        <Container className='dashboard min-vh-100'>\r\n            <br/><br/>\r\n            <h2 className='pt-4 text-left'>Dashboard</h2>\r\n            <div className='p-dashboard-line'>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={4}>\r\n                        <i className={icon}/>\r\n                        <select name=\"sensors\" id=\"sensors\"\r\n                                onChange={(e: ChangeEvent<HTMLSelectElement>) => setSensorId(e.target.value)}>\r\n                            <option value=\" \">Select Sensor</option>\r\n                            {sensorSet.map((value: sensorMeta) => <option value={value.id}>{value.title}</option>)}\r\n                        </select>\r\n                    </Col>\r\n                    <Col xs={12} sm={6} md={4}>\r\n                        <span className='float-left'>From:- </span>\r\n                        <input className='float-left' type=\"date\" id=\"start-date\" name=\"start_date\"\r\n                               onChange={onChangeStartHandle}\r\n                               placeholder=\"\" value={startDate ? startDate : ''}/>\r\n                    </Col>\r\n                    <Col xs={12} sm={6} md={4}>\r\n                        <span className='float-left'> To:- </span>\r\n                        <input className='float-left' type=\"date\" id=\"end-date\" name=\"end_date\"\r\n                               onChange={onChangeEndHandle}\r\n                               placeholder=\"\" value={endDate ? endDate : ''}/>\r\n                    </Col>\r\n                </Row>\r\n                <br/>\r\n                <div className='float-right pr-4'>\r\n                    <span className='float-left'>Last read value - </span>\r\n                    <span className='float-left'>{lastRead}</span>\r\n                </div>\r\n            </div>\r\n            <div className='d-none d-md-block d-lg-none'><Line data={sensorData} width={100} height={50}/></div>\r\n            <div className='d-none d-lg-block'><Line data={sensorData} width={100} height={35}/></div>\r\n            <div className='d-none d-sm-block d-md-none'><Line data={sensorData} width={100} height={70}/></div>\r\n            <div className='d-sm-none'><Line data={sensorData} width={90} height={100}/></div>\r\n            <br/><br/>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default DashBoard;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\SignUp.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\Header.tsx",["86","87"],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\RestAPITest.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\NoName.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\env.ts",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":4,"column":24,"nodeType":"94","messageId":"95","endLine":4,"endColumn":29},{"ruleId":"92","severity":1,"message":"96","line":2,"column":17,"nodeType":"94","messageId":"95","endLine":2,"endColumn":20},{"ruleId":"92","severity":1,"message":"97","line":2,"column":33,"nodeType":"94","messageId":"95","endLine":2,"endColumn":36},{"ruleId":"92","severity":1,"message":"98","line":2,"column":38,"nodeType":"94","messageId":"95","endLine":2,"endColumn":49},{"ruleId":"92","severity":1,"message":"99","line":3,"column":9,"nodeType":"94","messageId":"95","endLine":3,"endColumn":13},{"ruleId":"100","severity":1,"message":"101","line":64,"column":8,"nodeType":"102","endLine":64,"endColumn":20,"suggestions":"103"},{"ruleId":"92","severity":1,"message":"104","line":67,"column":11,"nodeType":"94","messageId":"95","endLine":67,"endColumn":33},{"ruleId":"92","severity":1,"message":"105","line":67,"column":34,"nodeType":"94","messageId":"95","endLine":67,"endColumn":59},{"ruleId":"106","severity":1,"message":"107","line":17,"column":21,"nodeType":"108","endLine":20,"endColumn":23},{"ruleId":"106","severity":1,"message":"107","line":26,"column":21,"nodeType":"108","endLine":29,"endColumn":23},{"ruleId":"106","severity":1,"message":"107","line":35,"column":21,"nodeType":"108","endLine":38,"endColumn":23},{"ruleId":"106","severity":1,"message":"107","line":44,"column":21,"nodeType":"108","endLine":47,"endColumn":23},{"ruleId":"100","severity":1,"message":"101","line":44,"column":8,"nodeType":"102","endLine":44,"endColumn":16,"suggestions":"109"},{"ruleId":"100","severity":1,"message":"110","line":78,"column":8,"nodeType":"102","endLine":78,"endColumn":38,"suggestions":"111"},{"ruleId":"92","severity":1,"message":"112","line":1,"column":16,"nodeType":"94","messageId":"95","endLine":1,"endColumn":25},{"ruleId":"92","severity":1,"message":"113","line":9,"column":21,"nodeType":"94","messageId":"95","endLine":9,"endColumn":32},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'Nav' is defined but never used.","'NavDropdown' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchedSensorSet' and 'getSensorSet'. Either include them or remove the dependency array.","ArrayExpression",["116"],"'selectedSensorCategory' is assigned a value but never used.","'setSelectedSensorCategory' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["117"],"React Hook useEffect has missing dependencies: 'fetchedDataSet', 'getRecord', and 'sensor'. Either include them or remove the dependency array.",["118"],"'useEffect' is defined but never used.","'setDropdown' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [fetchedSensorSet, getSensorSet, sensorType]",{"range":"125","text":"126"},"Update the dependencies array to be: [fetchedSensorSet, getSensorSet, sensor]",{"range":"127","text":"128"},"Update the dependencies array to be: [startDate, endDate, sensorId, getRecord, fetchedDataSet, sensor]",{"range":"129","text":"130"},[2267,2279],"[fetchedSensorSet, getSensorSet, sensorType]",[2044,2052],"[fetchedSensorSet, getSensorSet, sensor]",[3489,3519],"[startDate, endDate, sensorId, getRecord, fetchedDataSet, sensor]"]