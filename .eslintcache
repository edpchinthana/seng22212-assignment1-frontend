[{"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\index.tsx":"1","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\reportWebVitals.ts":"2","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\App.tsx":"3","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\Footer.tsx":"4","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Members.tsx":"5","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\About.tsx":"6","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Signin.tsx":"7","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Settings.tsx":"8","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\AlertHistory.tsx":"9","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Home.tsx":"10","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\DashBoard.tsx":"11","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\SignUp.tsx":"12","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\Header.tsx":"13","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\NoName.tsx":"14","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\RestAPITest.ts":"15","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Sensor.tsx":"16","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\env.ts":"17","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\SensorForm.tsx":"18"},{"size":547,"mtime":1608265659457,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":2585,"mtime":1609226356984,"results":"22","hashOfConfig":"20"},{"size":326,"mtime":1608359827275,"results":"23","hashOfConfig":"20"},{"size":4396,"mtime":1609262542134,"results":"24","hashOfConfig":"20"},{"size":347,"mtime":1609262542118,"results":"25","hashOfConfig":"20"},{"size":4807,"mtime":1609262542138,"results":"26","hashOfConfig":"20"},{"size":3852,"mtime":1609297540914,"results":"27","hashOfConfig":"20"},{"size":310,"mtime":1609226356989,"results":"28","hashOfConfig":"20"},{"size":1972,"mtime":1608362616073,"results":"29","hashOfConfig":"20"},{"size":5844,"mtime":1609290784091,"results":"30","hashOfConfig":"20"},{"size":5271,"mtime":1609262542137,"results":"31","hashOfConfig":"20"},{"size":2977,"mtime":1609262542113,"results":"32","hashOfConfig":"20"},{"size":623,"mtime":1609262542116,"results":"33","hashOfConfig":"20"},{"size":2441,"mtime":1609262542116,"results":"34","hashOfConfig":"20"},{"size":1479,"mtime":1609296955823,"results":"35","hashOfConfig":"20"},{"size":70,"mtime":1609262542117,"results":"36","hashOfConfig":"20"},{"size":4600,"mtime":1609297881155,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"lpfsp2",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\index.tsx",[],["80","81"],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\reportWebVitals.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\App.tsx",["82"],"import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./Header\";\r\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\r\nimport Members from \"./pages/Members\";\r\nimport Settings from \"./pages/Settings\";\r\nimport AlertHistory from \"./pages/AlertHistory\";\r\nimport About from \"./pages/About\";\r\nimport Home from \"./pages/Home\";\r\nimport './aserts/style-sheets/main.scss'\r\nimport Signin from \"./pages/Signin\";\r\nimport SignUp from \"./pages/SignUp\";\r\nimport DashBoard from \"./pages/DashBoard\";\r\nimport {GuardedRoute, GuardProvider} from \"react-router-guards\";\r\nimport Footer from \"./Footer\";\r\nconst getIsLoggedIn = () => localStorage.getItem('IS_LOGGED_IN') === 'true';\r\n\r\n\r\nfunction App() {\r\n    const requireLogin = (to: any, from: any, next: any) => {\r\n        if (to.meta.auth) {\r\n            if (getIsLoggedIn()) {\r\n                next();\r\n            }\r\n            next.redirect('/signin');\r\n        } else {\r\n            next();\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"App\">\r\n            <BrowserRouter>\r\n                <Header/>\r\n                <GuardProvider guards={[requireLogin]} loading={Home} error={Signin}>\r\n                    <Switch>\r\n                        <GuardedRoute path='/about' meta={{auth: true}}>\r\n                            <About/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/members' meta={{auth: true}}>\r\n                            <Members/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/settings' meta={{auth: true}}>\r\n                            <Settings/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/alert-history' meta={{auth: true}}>\r\n                            <AlertHistory/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/signin'meta={{auth: false}}>\r\n                            <Signin/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/signup'>\r\n                            <SignUp/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/dashboard/:sensor' meta={{auth: true}}>\r\n                            <DashBoard/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/'>\r\n                            <Home/>\r\n                        </GuardedRoute>\r\n                    </Switch>\r\n                </GuardProvider>\r\n                <Footer/>\r\n            </BrowserRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\Footer.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Members.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\About.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Signin.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Settings.tsx",["83","84","85","86","87"],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\AlertHistory.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Home.tsx",["88","89","90","91"],"import React from 'react';\r\nimport {Carousel} from \"react-bootstrap\";\r\nimport wind from '../aserts/images/wind.jpg';\r\nimport mist from '../aserts/images/mist.jpg';\r\nimport thunder from '../aserts/images/thunder.jpg';\r\nimport measure from '../aserts/images/mesure.jpg';\r\n\r\nconst Home: React.FC = () => {\r\n    document.title = 'weatherApp | home'\r\n    return (\r\n        <div className='min-vh-100'>\r\n            <br/><br/>\r\n            <h2 className='pt-4'>Weather App 2020</h2>\r\n\r\n            <Carousel>\r\n                <Carousel.Item interval={1000}>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={measure}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Daily Temperature</h3>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item interval={500}>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={thunder}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Daily Rain records</h3>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={wind}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Daily wind records</h3>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={mist}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Daily humidity records</h3>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n            </Carousel>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\DashBoard.tsx",["92","93"],"import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Line} from \"react-chartjs-2\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport {API} from \"../data-fetch/RestAPITest\";\r\nimport {SensorMeta, sensorRecode} from \"../types/types\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst DashBoard: React.FC = () => {\r\n    document.title = 'weatherApp | Dashboard'\r\n    let {sensor}: any = useParams();\r\n    let icon = (sensor === 'temperature') ? \"feather-thermometer\" : (sensor === \"rain\") ? \"feather-cloud-rain\" :\r\n        (sensor === 'wind') ? \"feather-wind\" : \"feather-cloud\";\r\n    let day = new Date(Date.now() - 86400000 * 20);\r\n    const [startDate, setStartDate] = useState(day.toISOString().slice(0, 10));\r\n    const [endDate, setEndDate] = useState(new Date().toISOString().slice(0, 10));\r\n    const onChangeStartHandle = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStartDate(e.target.value);\r\n    };\r\n    const onChangeEndHandle = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setEndDate(e.target.value);\r\n    };\r\n    const [sensorData, setSensorData] = useState<any>({labels: [], datasets: [], options: []});\r\n    const [lastRead, setLastRead] = useState<any>('');\r\n    const [sensorId, setSensorId] = useState<any>('');\r\n    const [sensorSet, setSensorSet] = useState<SensorMeta[]>([]);\r\n\r\n    let fetchedSensorSet: SensorMeta[];\r\n    const getSensorSet = async () => {\r\n        const r = await API.GET(`/sensor?sensorType=${sensor.toUpperCase()}`);\r\n        fetchedSensorSet = r;\r\n        return r;\r\n    }\r\n\r\n    useEffect(() => {\r\n        getSensorSet().then(() => {\r\n            let sensors = fetchedSensorSet.map((sen: SensorMeta) => sen);\r\n            setSensorSet(sensors);\r\n        })\r\n\r\n        if(sensor!==\"temperature\"){Swal.fire('Sorry. Those type of sensors does not have setup.  ' +\r\n            'Temperature sensors only have been set up.');}\r\n        else{Swal.fire('Please select the sensor and time range as you wish');}\r\n    }, [sensor])\r\n\r\n    let fetchedDataSet: sensorRecode[];\r\n    const getRecord = async () => {\r\n        const r = await API.GET(`/data?sensorId=${sensorId}&from=${startDate}&to=${endDate}`);\r\n        fetchedDataSet = r;\r\n        return r\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRecord().then(() => {\r\n            let val = fetchedDataSet[fetchedDataSet.length - 1].dataValue;\r\n            let data = {\r\n                // labels: dType.map((record: record) => record.time.toFixed(2) + 'h'),\r\n                labels: fetchedDataSet.map((recode) => `${new Date(recode.capturedDate).getDate()}d-${new Date(recode.capturedDate).getHours()}:${new Date(recode.capturedDate).getMinutes()}h` ),\r\n                // labels: fetchedDataSet.map((recode) => recode.capturedDate),\r\n                datasets: [\r\n                    {\r\n                        label: sensor,\r\n                        data: fetchedDataSet.map((recode) => recode.dataValue),\r\n                        fill: false,\r\n                        borderColor: (sensor === 'wind') ? '#0d8c1a' : (sensor === 'temperature') ? '#ac1010' :\r\n                            (sensor === 'rain') ? '#0824b3' : '#13caaf'\r\n                    }\r\n                ],\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                }\r\n            };\r\n            setSensorData(data);\r\n            setLastRead(val);\r\n        })\r\n\r\n    }, [startDate, endDate, sensorId])\r\n\r\n    return (\r\n        <Container className='dashboard min-vh-100'>\r\n            <br/><br/>\r\n            <h2 className='pt-4 text-left'>Dashboard</h2>\r\n            <div className='p-dashboard-line'>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={4}>\r\n                        <i className={icon}/>\r\n                        <select name=\"sensors\" id=\"sensors\"\r\n                                onChange={(e: ChangeEvent<HTMLSelectElement>) => setSensorId(e.target.value)}>\r\n                            <option value=\" \">Select Sensor</option>\r\n                            {sensorSet.map((value: SensorMeta) => <option value={value.id}>{value.title}</option>)}\r\n                        </select>\r\n                    </Col>\r\n                    <Col xs={12} sm={6} md={4}>\r\n                        <span className='float-left'>From:- </span>\r\n                        <input className='float-left' type=\"date\" id=\"start-date\" name=\"start_date\"\r\n                               onChange={onChangeStartHandle}\r\n                               placeholder=\"\" value={startDate ? startDate : ''}/>\r\n                    </Col>\r\n                    <Col xs={12} sm={6} md={4}>\r\n                        <span className='float-left'> To:- </span>\r\n                        <input className='float-left' type=\"date\" id=\"end-date\" name=\"end_date\"\r\n                               onChange={onChangeEndHandle}\r\n                               placeholder=\"\" value={endDate ? endDate : ''}/>\r\n                    </Col>\r\n                </Row>\r\n                <br/>\r\n                <div className='float-right pr-4'>\r\n                    <span className='float-left'>Last read value - </span>\r\n                    <span className='float-left'>{lastRead}</span>\r\n                </div>\r\n            </div>\r\n            <div className='d-none d-md-block d-lg-none'><Line data={sensorData} width={100} height={50}/></div>\r\n            <div className='d-none d-lg-block'><Line data={sensorData} width={100} height={35}/></div>\r\n            <div className='d-none d-sm-block d-md-none'><Line data={sensorData} width={100} height={70}/></div>\r\n            <div className='d-sm-none'><Line data={sensorData} width={90} height={100}/></div>\r\n            <br/><br/>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default DashBoard;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\SignUp.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\Header.tsx",["94","95"],"import React, {useEffect, useState} from 'react';\r\nimport {Nav, Navbar, NavDropdown} from \"react-bootstrap\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Header: React.FC = () => {\r\n    const getIsLoggedIn = () => localStorage.getItem('IS_LOGGED_IN') === 'true';\r\n    const sensorCategories = JSON.parse(localStorage.getItem(\"SensorCategories\") as string);;\r\n    console.log(sensorCategories)\r\n    const[dropdown, setDropdown] = useState( \"Temperature\");\r\n    // const[dropdown, setDropdown] = useState(sensorCategories[0] || \"Temperature\");\r\n\r\n    const showHeader =() => {\r\n        if(!getIsLoggedIn()){\r\n            return  (\r\n                <Navbar className='p-header-area' collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" style={{position:'fixed', width: '100%'}}>\r\n                    <Navbar.Brand><Link to='/' className='links'>Monitor</Link></Navbar.Brand>\r\n                    <Nav.Link><Link to='/signin' className='links'>Sign in</Link></Nav.Link>\r\n\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n                </Navbar>\r\n            )\r\n        }else {\r\n            return(\r\n                <Navbar className='p-header-area' collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" style={{position:'fixed', width: '100%'}}>\r\n                    <Navbar.Brand><Link to='/' className='links'>Monitor</Link></Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n\r\n                            <Nav.Link><Link to='/about' className='links'>About</Link></Nav.Link>\r\n                            <Nav.Link><Link to='/alert-history' className='links'>Alert History</Link></Nav.Link>\r\n                            <Nav.Link><Link to='/signin' className='links'>Sign in</Link></Nav.Link>\r\n                            <NavDropdown title={dropdown}  id=\"collasible-nav-dropdown\"\r\n                                // onClick={()=>setDropdown(makeEventKey)}\r\n                            >\r\n                                {\r\n                                    sensorCategories.map((sensorCategory:string)=>\r\n                                        <NavDropdown.Item><Nav.Link><Link to={`/dashboard/${sensorCategory.toLowerCase()}`}>{sensorCategory}</Link></Nav.Link></NavDropdown.Item>)\r\n                                }\r\n\r\n                            </NavDropdown>\r\n                            <Nav.Link><Link to='/members'className='links'>Members</Link></Nav.Link>\r\n                        </Nav>\r\n                        <Nav>\r\n                            <Nav.Link><Link to='/settings'className='links'>Settings</Link></Nav.Link>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n  <React.Fragment>\r\n      {showHeader()}\r\n  </React.Fragment>\r\n );}\r\n\r\nexport default Header;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\NoName.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\RestAPITest.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Sensor.tsx",["96"],"import React, {useState} from \"react\";\r\nimport {Row, Col, Container} from \"react-bootstrap\";\r\nimport {SensorMeta} from \"../types/types\";\r\nimport SensorForm from \"./SensorForm\";\r\n\r\n\r\n\r\ntype SensorProps={\r\n    sensor:SensorMeta\r\n    num: number\r\n}\r\n\r\nconst Sensor:React.FC<SensorProps>=(props)=>{\r\n    const {sensor,num}=props;\r\n    const [isUpdatable, setIsUpdatable]= useState(false)\r\n\r\n    const [isEditClick,setIsEditClick]=useState(false);\r\n    const handleEditClick=()=>{\r\n        setIsUpdatable(true);\r\n\r\n    }\r\n    const onSensorDelete = () => {\r\n\r\n    }\r\n\r\n    return(\r\n        <Container className='sensor'>\r\n            <Row className='pt-1 pb-1 pl-0 pr-4 text-left'>\r\n                <Col xs={9} className=\"pl-0\">\r\n                    <label className='mb-2 float-left text-left'>{num}.  {sensor.title}  </label>\r\n                </Col>\r\n                <Col xs={3} className='text-right'>\r\n                    {!isEditClick && <i className='feather-edit mr-3' onClick={()=>handleEditClick()}/>}\r\n                    {!isEditClick && <i className='feather-trash-2' onClick={()=>onSensorDelete()}/>}\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    {\r\n                        isUpdatable &&  <SensorForm formTitle={\"Update Sensor\"} sensor={sensor} setIsUpdatable={setIsUpdatable}/>\r\n                    }\r\n                </Col>\r\n\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Sensor;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\env.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\SensorForm.tsx",["97"],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":4,"column":24,"nodeType":"104","messageId":"105","endLine":4,"endColumn":29},{"ruleId":"102","severity":1,"message":"106","line":2,"column":17,"nodeType":"104","messageId":"105","endLine":2,"endColumn":20},{"ruleId":"102","severity":1,"message":"107","line":2,"column":33,"nodeType":"104","messageId":"105","endLine":2,"endColumn":36},{"ruleId":"102","severity":1,"message":"108","line":2,"column":38,"nodeType":"104","messageId":"105","endLine":2,"endColumn":49},{"ruleId":"102","severity":1,"message":"109","line":3,"column":9,"nodeType":"104","messageId":"105","endLine":3,"endColumn":13},{"ruleId":"110","severity":1,"message":"111","line":67,"column":8,"nodeType":"112","endLine":67,"endColumn":20,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":17,"column":21,"nodeType":"116","endLine":20,"endColumn":23},{"ruleId":"114","severity":1,"message":"115","line":26,"column":21,"nodeType":"116","endLine":29,"endColumn":23},{"ruleId":"114","severity":1,"message":"115","line":35,"column":21,"nodeType":"116","endLine":38,"endColumn":23},{"ruleId":"114","severity":1,"message":"115","line":44,"column":21,"nodeType":"116","endLine":47,"endColumn":23},{"ruleId":"110","severity":1,"message":"111","line":44,"column":8,"nodeType":"112","endLine":44,"endColumn":16,"suggestions":"117"},{"ruleId":"110","severity":1,"message":"118","line":78,"column":8,"nodeType":"112","endLine":78,"endColumn":38,"suggestions":"119"},{"ruleId":"102","severity":1,"message":"120","line":1,"column":16,"nodeType":"104","messageId":"105","endLine":1,"endColumn":25},{"ruleId":"102","severity":1,"message":"121","line":9,"column":21,"nodeType":"104","messageId":"105","endLine":9,"endColumn":32},{"ruleId":"102","severity":1,"message":"122","line":17,"column":24,"nodeType":"104","messageId":"105","endLine":17,"endColumn":38},{"ruleId":"102","severity":1,"message":"123","line":16,"column":12,"nodeType":"104","messageId":"105","endLine":16,"endColumn":16},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'Nav' is defined but never used.","'NavDropdown' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchedSensorSet' and 'getSensorSet'. Either include them or remove the dependency array.","ArrayExpression",["126"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["127"],"React Hook useEffect has missing dependencies: 'fetchedDataSet', 'getRecord', and 'sensor'. Either include them or remove the dependency array.",["128"],"'useEffect' is defined but never used.","'setDropdown' is assigned a value but never used.","'setIsEditClick' is assigned a value but never used.","'type' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},"Update the dependencies array to be: [fetchedSensorSet, getSensorSet, sensorType]",{"range":"135","text":"136"},"Update the dependencies array to be: [fetchedSensorSet, getSensorSet, sensor]",{"range":"137","text":"138"},"Update the dependencies array to be: [startDate, endDate, sensorId, getRecord, fetchedDataSet, sensor]",{"range":"139","text":"140"},[2385,2397],"[fetchedSensorSet, getSensorSet, sensorType]",[2044,2052],"[fetchedSensorSet, getSensorSet, sensor]",[3489,3519],"[startDate, endDate, sensorId, getRecord, fetchedDataSet, sensor]"]