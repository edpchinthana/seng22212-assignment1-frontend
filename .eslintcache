[{"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\index.tsx":"1","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\reportWebVitals.ts":"2","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\App.tsx":"3","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\Footer.tsx":"4","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Members.tsx":"5","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\About.tsx":"6","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Signin.tsx":"7","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Settings.tsx":"8","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\AlertHistory.tsx":"9","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Home.tsx":"10","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\DashBoard.tsx":"11","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\SignUp.tsx":"12","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\Header.tsx":"13","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\NoName.tsx":"14","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\RestAPITest.ts":"15","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Sensor.tsx":"16","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\env.ts":"17","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\SensorForm.tsx":"18"},{"size":547,"mtime":1608265659457,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":2581,"mtime":1609302159323,"results":"22","hashOfConfig":"20"},{"size":365,"mtime":1609302159248,"results":"23","hashOfConfig":"20"},{"size":4396,"mtime":1609302159721,"results":"24","hashOfConfig":"20"},{"size":346,"mtime":1609302159443,"results":"25","hashOfConfig":"20"},{"size":4869,"mtime":1609302159311,"results":"26","hashOfConfig":"20"},{"size":4020,"mtime":1609301200949,"results":"27","hashOfConfig":"20"},{"size":309,"mtime":1609302159500,"results":"28","hashOfConfig":"20"},{"size":1972,"mtime":1608362616073,"results":"29","hashOfConfig":"20"},{"size":5891,"mtime":1609302158941,"results":"30","hashOfConfig":"20"},{"size":5330,"mtime":1609302158917,"results":"31","hashOfConfig":"20"},{"size":2864,"mtime":1609302159511,"results":"32","hashOfConfig":"20"},{"size":654,"mtime":1609302159694,"results":"33","hashOfConfig":"20"},{"size":2441,"mtime":1609262542116,"results":"34","hashOfConfig":"20"},{"size":2243,"mtime":1609302159554,"results":"35","hashOfConfig":"20"},{"size":70,"mtime":1609262542117,"results":"36","hashOfConfig":"20"},{"size":6826,"mtime":1609302159524,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"lpfsp2",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\index.tsx",[],["80","81"],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\reportWebVitals.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\App.tsx",["82"],"import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./Header\";\r\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\r\nimport Members from \"./pages/Members\";\r\nimport Settings from \"./pages/Settings\";\r\nimport AlertHistory from \"./pages/AlertHistory\";\r\nimport About from \"./pages/About\";\r\nimport Home from \"./pages/Home\";\r\nimport './aserts/style-sheets/main.scss'\r\nimport Signin from \"./pages/Signin\";\r\nimport SignUp from \"./pages/SignUp\";\r\nimport DashBoard from \"./pages/DashBoard\";\r\nimport {GuardedRoute, GuardProvider} from \"react-router-guards\";\r\nimport Footer from \"./Footer\";\r\nconst getIsLoggedIn = () => localStorage.getItem('IS_LOGGED_IN') === 'true';\r\n\r\n\r\nfunction App() {\r\n    const requireLogin = (to: any, from: any, next: any) => {\r\n        if (to.meta.auth) {\r\n            if (getIsLoggedIn()) {\r\n                next();\r\n            }\r\n            next.redirect('/signin');\r\n        } else {\r\n            next();\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"App\">\r\n            <BrowserRouter>\r\n                <Header/>\r\n                <GuardProvider guards={[requireLogin]} loading={Home} error={Signin}>\r\n                    <Switch>\r\n                        <GuardedRoute path='/about' meta={{auth: true}}>\r\n                            <About/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/members' meta={{auth: true}}>\r\n                            <Members/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/settings' meta={{auth: true}}>\r\n                            <Settings/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/alert-history' meta={{auth: true}}>\r\n                            <AlertHistory/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/signin'meta={{auth: false}}>\r\n                            <Signin/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/signup'>\r\n                            <SignUp/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/dashboard/:sensor' meta={{auth: true}}>\r\n                            <DashBoard/>\r\n                        </GuardedRoute>\r\n                        <GuardedRoute path='/'>\r\n                            <Home/>\r\n                        </GuardedRoute>\r\n                    </Switch>\r\n                </GuardProvider>\r\n                <Footer/>\r\n            </BrowserRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\Footer.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Members.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\About.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Signin.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Settings.tsx",["83"],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\AlertHistory.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Home.tsx",["84","85","86","87"],"import React from 'react';\r\nimport {Carousel} from \"react-bootstrap\";\r\nimport wind from '../aserts/images/wind.jpg';\r\nimport mist from '../aserts/images/mist.jpg';\r\nimport thunder from '../aserts/images/thunder.jpg';\r\nimport measure from '../aserts/images/mesure.jpg';\r\n\r\nconst Home: React.FC = () => {\r\n    document.title = 'weatherApp | home'\r\n    return (\r\n        <div className='min-vh-100'>\r\n            <br/><br/>\r\n            <h2 className='pt-4'>Weather App 2020</h2>\r\n\r\n            <Carousel>\r\n                <Carousel.Item interval={1000}>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={measure}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Daily Temperature</h3>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item interval={500}>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={thunder}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Daily Rain records</h3>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={wind}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Daily wind records</h3>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src={mist}\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Daily humidity records</h3>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n            </Carousel>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\DashBoard.tsx",["88","89"],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\SignUp.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\Header.tsx",["90","91"],"import React, {useEffect, useState} from 'react';\r\nimport {Nav, Navbar, NavDropdown} from \"react-bootstrap\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Header: React.FC = () => {\r\n    const getIsLoggedIn = () => localStorage.getItem('IS_LOGGED_IN') === 'true';\r\n    const sensorCategories = JSON.parse(localStorage.getItem(\"SensorCategories\") as string);;\r\n    console.log(sensorCategories)\r\n    const[dropdown, setDropdown] = useState( \"Temperature\");\r\n    // const[dropdown, setDropdown] = useState(sensorCategories[0] || \"Temperature\");\r\n\r\n    const showHeader =() => {\r\n        if(!getIsLoggedIn()){\r\n            return  (\r\n                <Navbar className='p-header-area' collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" style={{position:'fixed', width: '100%'}}>\r\n                    <Navbar.Brand><Link to='/' className='links'>Monitor</Link></Navbar.Brand>\r\n                    <Nav.Link><Link to='/signin' className='links'>Sign in</Link></Nav.Link>\r\n\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n                </Navbar>\r\n            )\r\n        }else {\r\n            return(\r\n                <Navbar className='p-header-area' collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" style={{position:'fixed', width: '100%'}}>\r\n                    <Navbar.Brand><Link to='/' className='links'>Monitor</Link></Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n\r\n                            <Nav.Link><Link to='/about' className='links'>About</Link></Nav.Link>\r\n                            <Nav.Link><Link to='/alert-history' className='links'>Alert History</Link></Nav.Link>\r\n                            <Nav.Link><Link to='/signin' className='links'>Sign in</Link></Nav.Link>\r\n                            <NavDropdown title={dropdown}  id=\"collasible-nav-dropdown\"\r\n                                // onClick={()=>setDropdown(makeEventKey)}\r\n                            >\r\n                                {\r\n                                    sensorCategories.map((sensorCategory:string)=>\r\n                                        <NavDropdown.Item><Nav.Link><Link to={`/dashboard/${sensorCategory.toLowerCase()}`}>{sensorCategory}</Link></Nav.Link></NavDropdown.Item>)\r\n                                }\r\n\r\n                            </NavDropdown>\r\n                            <Nav.Link><Link to='/members'className='links'>Members</Link></Nav.Link>\r\n                        </Nav>\r\n                        <Nav>\r\n                            <Nav.Link><Link to='/settings'className='links'>Settings</Link></Nav.Link>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n  <React.Fragment>\r\n      {showHeader()}\r\n  </React.Fragment>\r\n );}\r\n\r\nexport default Header;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\NoName.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\RestAPITest.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Sensor.tsx",["92"],"import React, {useState} from \"react\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport {ISensor} from \"../types/types\";\r\nimport SensorForm from \"./SensorForm\";\r\nimport Swal from \"sweetalert2\";\r\n\r\ntype SensorProps = {\r\n    sensor: ISensor\r\n    num: number\r\n}\r\n\r\nconst Sensor: React.FC<SensorProps> = (props) => {\r\n    const {sensor, num} = props;\r\n    const [isUpdatable, setIsUpdatable] = useState(false)\r\n\r\n    const [isEditClick, setIsEditClick] = useState(false);\r\n    const handleEditClick = () => {\r\n        setIsUpdatable(true);\r\n\r\n    }\r\n    const onSensorDelete = () => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: \"You won't be able to revert this!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, delete it!'\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                //TODO create delete sensor function here\r\n\r\n                Swal.fire(\r\n                    'Deleted!',\r\n                    'Your file has been deleted.',\r\n                    'success'\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container className='sensor'>\r\n            <Row className='pt-1 pb-1 pl-0 pr-4 text-left'>\r\n                <Col xs={9} className=\"pl-0\">\r\n                    <label\r\n                        className='mb-2 float-left text-left'>{num}. {sensor.title} - {sensor.threshold} -{sensor.unit} </label>\r\n                </Col>\r\n                <Col xs={3} className='text-right'>\r\n                    {!isEditClick && <i className='feather-edit mr-3' onClick={() => handleEditClick()}/>}\r\n                    {!isEditClick && <i className='feather-trash-2' onClick={() => onSensorDelete()}/>}\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    {\r\n                        isUpdatable &&\r\n                        <SensorForm formTitle={\"Update Sensor\"} sensor={sensor} setIsUpdatable={setIsUpdatable}/>\r\n                    }\r\n                </Col>\r\n\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Sensor;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\env.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\SensorForm.tsx",["93"],"import React, {ChangeEvent, FormEvent, useState} from \"react\";\r\nimport {Button, Col, Form, Row} from \"react-bootstrap\";\r\nimport {ISensor,} from \"../types/types\";\r\nimport Swal from \"sweetalert2\";\r\n\r\ntype UpdateSensorProps = {\r\n    sensor: ISensor;\r\n    formTitle: string;\r\n    setIsUpdatable: (arg: boolean) => void\r\n}\r\n\r\nconst SensorForm: React.FC<UpdateSensorProps> = (props) => {\r\n    const {sensor, formTitle} = props;\r\n    const [id, setId] = useState(sensor.id);\r\n    const [title, setTitle] = useState(sensor.title);\r\n    const [threshold, setThreshold] = useState(sensor.threshold);\r\n    const [type, setType] = useState(sensor.type);\r\n    const [unit, setUnit] = useState(sensor.unit)\r\n    const [validated, setValidated] = useState(false);\r\n    const sensorCategories = JSON.parse(localStorage.getItem(\"SensorCategories\") as string);\r\n\r\n    const handleUpdate = (event: FormEvent) => {\r\n        const form = event.currentTarget;\r\n        // @ts-ignore\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        } else if (title !== null && id !== null && title !== '' && id !== '') {\r\n            setValidated(false);\r\n            Swal.fire({\r\n                title: 'Do you want to save the changes?',\r\n                showDenyButton: true,\r\n                showCancelButton: true,\r\n                confirmButtonText: `Save`,\r\n                denyButtonText: `Don't save`,\r\n            }).then((result) => {\r\n                /* Read more about isConfirmed, isDenied below */\r\n                if (result.isConfirmed) {\r\n                    Swal.fire('Saved!', '', 'success');\r\n\r\n                    if (formTitle.split(' ')[0] === 'Add') {\r\n                        //TODO: add sensor function here.\r\n\r\n                    } else {\r\n                        //TODO: create sensor update function here\r\n                    }\r\n\r\n                    props.setIsUpdatable(false)\r\n                } else if (result.isDenied) {\r\n                    Swal.fire('Changes are not saved', '', 'info')\r\n                    props.setIsUpdatable(false)\r\n                }\r\n            })\r\n        } else {\r\n            setValidated(true);\r\n        }\r\n\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"my-4 p-3 \"\r\n             style={{maxWidth: '400px', border: '1px solid gray', margin: \"auto\", borderRadius: '10px'}}>\r\n            <Form.Row>\r\n                <Col className=\"pl-1 mb-3\">\r\n                    <strong style={{textDecoration: 'underline'}}>{formTitle}</strong>\r\n\r\n                    <i className='feather-x-circle text-dark float-right' onClick={() => props.setIsUpdatable(false)}/>\r\n                </Col>\r\n            </Form.Row>\r\n            <Form noValidate validated={validated}>\r\n\r\n                <Form.Row>\r\n                    <Form.Group className=\"form-group-dev\">\r\n                        <Form.Label className=\"text-left label-text\">Title of Sensor</Form.Label>\r\n                        <Form.Control required type=\"text\" className=\"form-input\" placeholder=\"\"\r\n                                      value={title ? title : ''}\r\n                                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTitle(e.target.value)}/>\r\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group className=\"form-group-dev\">\r\n                        <Form.Label className=\" label-text \">Sensor Id</Form.Label>\r\n                        <Form.Control className=\"form-input\" required type=\"text\" placeholder=\"\" value={id ? id : ''}\r\n                                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setId(e.target.value)}/>\r\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Group className=\"form-group-dev\">\r\n                        <Form.Label className=\"text-left label-text\">Threshold</Form.Label>\r\n                        <Row>\r\n                            <Col xs={8} sm={8}>\r\n                                <Form.Control className=\"form-input\" required type=\"range\" placeholder=\"\"\r\n                                              value={threshold ? threshold : ''}\r\n                                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setThreshold(Number(e.target.value))}/>\r\n                            </Col>\r\n                            <Col xs={4} sm={4}>\r\n                                <Form.Control className=\"form-input\" required type=\"text\" placeholder=\"\"\r\n                                              value={threshold ? threshold : ''}\r\n                                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setThreshold(Number(e.target.value))}/>\r\n                            </Col>\r\n                        </Row>\r\n\r\n\r\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Label className=\"text-left Sensor-label\">Sensor type</Form.Label>\r\n                    <Form.Group controlId=\"SensorSelectID\" className=\"form-group-dev\">\r\n                        <br/>\r\n                        <select name=\"sensors\" id=\"sensors\"\r\n                                onChange={(e: ChangeEvent<HTMLSelectElement>) => setType(e.target.value)}>\r\n                            {\r\n                                sensorCategories.map((sensorCategory: string) =>\r\n                                    <option value={sensorCategory}>{sensorCategory}</option>)}\r\n                        </select>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Group className=\"form-group-dev\">\r\n                        <Form.Label className=\"text-left label-text\">Sensor unit</Form.Label>\r\n                        <Form.Control className=\"form-input\" required type=\"text\" placeholder=\"\"\r\n                                      value={unit ? unit : ''}\r\n                                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUnit(e.target.value)}/>\r\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Button onClick={event => handleUpdate(event)} size='sm' variant='success'\r\n                        style={{width: '100%', padding: '10px'}}>\r\n                    {formTitle.split(' ')[0]}\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\nexport default SensorForm;\r\n",{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":4,"column":24,"nodeType":"100","messageId":"101","endLine":4,"endColumn":29},{"ruleId":"102","severity":1,"message":"103","line":67,"column":8,"nodeType":"104","endLine":67,"endColumn":20,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":17,"column":21,"nodeType":"108","endLine":20,"endColumn":23},{"ruleId":"106","severity":1,"message":"107","line":26,"column":21,"nodeType":"108","endLine":29,"endColumn":23},{"ruleId":"106","severity":1,"message":"107","line":35,"column":21,"nodeType":"108","endLine":38,"endColumn":23},{"ruleId":"106","severity":1,"message":"107","line":44,"column":21,"nodeType":"108","endLine":47,"endColumn":23},{"ruleId":"102","severity":1,"message":"103","line":47,"column":8,"nodeType":"104","endLine":47,"endColumn":16,"suggestions":"109"},{"ruleId":"102","severity":1,"message":"110","line":81,"column":8,"nodeType":"104","endLine":81,"endColumn":38,"suggestions":"111"},{"ruleId":"98","severity":1,"message":"112","line":1,"column":16,"nodeType":"100","messageId":"101","endLine":1,"endColumn":25},{"ruleId":"98","severity":1,"message":"113","line":9,"column":21,"nodeType":"100","messageId":"101","endLine":9,"endColumn":32},{"ruleId":"98","severity":1,"message":"114","line":18,"column":24,"nodeType":"100","messageId":"101","endLine":18,"endColumn":38},{"ruleId":"98","severity":1,"message":"115","line":17,"column":12,"nodeType":"100","messageId":"101","endLine":17,"endColumn":16},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchedSensorSet' and 'getSensorSet'. Either include them or remove the dependency array.","ArrayExpression",["118"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["119"],"React Hook useEffect has missing dependencies: 'fetchedDataSet', 'getRecord', and 'sensor'. Either include them or remove the dependency array.",["120"],"'useEffect' is defined but never used.","'setDropdown' is assigned a value but never used.","'setIsEditClick' is assigned a value but never used.","'type' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"Update the dependencies array to be: [fetchedSensorSet, getSensorSet, sensorType]",{"range":"127","text":"128"},"Update the dependencies array to be: [fetchedSensorSet, getSensorSet, sensor]",{"range":"129","text":"130"},"Update the dependencies array to be: [startDate, endDate, sensorId, getRecord, fetchedDataSet, sensor]",{"range":"131","text":"132"},[2347,2359],"[fetchedSensorSet, getSensorSet, sensorType]",[2092,2100],"[fetchedSensorSet, getSensorSet, sensor]",[3536,3566],"[startDate, endDate, sensorId, getRecord, fetchedDataSet, sensor]"]