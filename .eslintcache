[{"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\index.tsx":"1","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\reportWebVitals.ts":"2","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\App.tsx":"3","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Members.tsx":"4","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\About.tsx":"5","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Signin.tsx":"6","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Settings.tsx":"7","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\AlertHistory.tsx":"8","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Home.tsx":"9","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\DashBoard.tsx":"10","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\SignUp.tsx":"11","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\NoName.tsx":"12","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\RestAPITest.ts":"13","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\env.ts":"14","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\commponents\\Footer.tsx":"15","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\commponents\\Header.tsx":"16","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\commponents\\Sensor.tsx":"17","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\commponents\\SensorForm.tsx":"18"},{"size":547,"mtime":1608265659457,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":2605,"mtime":1609302328647,"results":"22","hashOfConfig":"20"},{"size":4396,"mtime":1609302159721,"results":"23","hashOfConfig":"20"},{"size":346,"mtime":1609302159443,"results":"24","hashOfConfig":"20"},{"size":4869,"mtime":1609302159311,"results":"25","hashOfConfig":"20"},{"size":4039,"mtime":1609303860702,"results":"26","hashOfConfig":"20"},{"size":309,"mtime":1609302159500,"results":"27","hashOfConfig":"20"},{"size":2131,"mtime":1609303264465,"results":"28","hashOfConfig":"20"},{"size":5747,"mtime":1609304070523,"results":"29","hashOfConfig":"20"},{"size":5330,"mtime":1609302158917,"results":"30","hashOfConfig":"20"},{"size":654,"mtime":1609302159694,"results":"31","hashOfConfig":"20"},{"size":2441,"mtime":1609262542116,"results":"32","hashOfConfig":"20"},{"size":70,"mtime":1609262542117,"results":"33","hashOfConfig":"20"},{"size":365,"mtime":1609302159248,"results":"34","hashOfConfig":"20"},{"size":2858,"mtime":1609303860721,"results":"35","hashOfConfig":"20"},{"size":2145,"mtime":1609303264447,"results":"36","hashOfConfig":"20"},{"size":6852,"mtime":1609303860742,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"lpfsp2",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\index.tsx",[],["77","78"],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\reportWebVitals.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\App.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Members.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\About.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Signin.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Settings.tsx",["79"],"import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Button, Container,} from \"react-bootstrap\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Swal from 'sweetalert2';\r\nimport {ISensor} from \"../types/types\";\r\nimport {API} from \"../data-fetch/RestAPITest\";\r\nimport Sensor from \"../commponents/Sensor\";\r\nimport SensorForm from \"../commponents/SensorForm\";\r\n\r\nconst Settings: React.FC = () => {\r\n    document.title = 'weatherApp | settings';\r\n    const history = useHistory();\r\n    const [sensorType, setSensorType] = useState('');\r\n    const [sensorSet, setSensorSet] = useState<ISensor[]>([]);\r\n    const [isAdd, setIsAdd] = useState(false);\r\n    const sensorCategories = JSON.parse(localStorage.getItem(\"SensorCategories\") as string);\r\n\r\n    const handleSignOut = () => {\r\n        const swalWithBootstrapButtons = Swal.mixin({\r\n            customClass: {\r\n                confirmButton: 'btn btn-success',\r\n                cancelButton: 'btn btn-danger'\r\n            },\r\n            buttonsStyling: false\r\n        })\r\n\r\n        swalWithBootstrapButtons.fire({\r\n            title: 'Are you sure to sign out?',\r\n            text: \"You'll need sign in to use this!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes, sign out me!',\r\n            cancelButtonText: 'No, cancel!',\r\n            reverseButtons: true\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                swalWithBootstrapButtons.fire(\r\n                    'Sign out!',\r\n                    'You have been sign out successfully.',\r\n                    'success'\r\n                )\r\n                localStorage.setItem('IS_LOGGED_IN', 'false');\r\n                history.push('/signin');\r\n            } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n                swalWithBootstrapButtons.fire(\r\n                    'Cancelled',\r\n                    'Your imaginary login is safe :)',\r\n                    'error'\r\n                )\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    let fetchedSensorSet: ISensor[];\r\n    const getSensorSet = async () => {\r\n        const r = await API.GET(`/sensor?sensorType=${sensorType.toUpperCase()}`);\r\n        fetchedSensorSet = r;\r\n        return r;\r\n    }\r\n\r\n    useEffect(() => {\r\n        getSensorSet().then(() => {\r\n            let sensors = fetchedSensorSet.map((sen: ISensor) => sen);\r\n            setSensorSet(sensors);\r\n        })\r\n    }, [sensorType])\r\n\r\n    return (\r\n        <Container className='min-vh-100'>\r\n            <br/><br/><br/>\r\n            <h2>Settings</h2>\r\n            <br/>\r\n            <div><h3>Sensor manage</h3>\r\n\r\n                <select name=\"sensors\" id=\"sensors\"\r\n                        onChange={(e: ChangeEvent<HTMLSelectElement>) => setSensorType(e.target.value)}>\r\n                    <option value=\" \">Select Sensor category</option>\r\n                    {\r\n                        sensorCategories.map((sensorCategory: string) =>\r\n                            <option value={sensorCategory}>{sensorCategory}</option>)}\r\n                </select>\r\n                {\r\n                    sensorSet.map((sensor: ISensor, index: number) => <Sensor sensor={sensor} num={index + 1}\r\n                                                                              key={index}/>)\r\n                }\r\n\r\n            </div>\r\n            <div><h3 onClick={() => setIsAdd(true)} style={{cursor: 'pointer'}}><i className=\"feather-plus-circle\"/> Add\r\n                new sensor</h3>\r\n                {\r\n                    isAdd &&\r\n                    <SensorForm formTitle={\"Add Sensor\"} sensor={{title: '', id: '', threshold: 0, type: '', unit: ''}}\r\n                                setIsUpdatable={setIsAdd}/>\r\n                }\r\n            </div>\r\n\r\n            <div><h3>Sign out</h3></div>\r\n            <Button className='p-button mt-3' onClick={handleSignOut}>Sign out</Button>\r\n            <br/><br/>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Settings;\r\n","H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\AlertHistory.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\Home.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\DashBoard.tsx",["80","81"],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\pages\\SignUp.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\NoName.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\RestAPITest.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\data-fetch\\env.ts",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\commponents\\Footer.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\commponents\\Header.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\commponents\\Sensor.tsx",[],"H:\\A_Padma_Codes\\Web_Design\\A React projects\\wether-app-assignment\\src\\commponents\\SensorForm.tsx",["82"],"import React, {ChangeEvent, FormEvent, useState} from \"react\";\r\nimport {Button, Col, Form, Row} from \"react-bootstrap\";\r\nimport {ISensor,} from \"../types/types\";\r\nimport Swal from \"sweetalert2\";\r\n\r\ntype UpdateSensorProps = {\r\n    sensor: ISensor;\r\n    formTitle: string;\r\n    setIsUpdatable: (arg: boolean) => void\r\n}\r\n\r\nconst SensorForm: React.FC<UpdateSensorProps> = (props) => {\r\n    const {sensor, formTitle} = props;\r\n    const [id, setId] = useState(sensor.id);\r\n    const [title, setTitle] = useState(sensor.title);\r\n    const [threshold, setThreshold] = useState(sensor.threshold);\r\n    const [type, setType] = useState(sensor.type);\r\n    const [unit, setUnit] = useState(sensor.unit)\r\n    const [validated, setValidated] = useState(false);\r\n    const sensorCategories = JSON.parse(localStorage.getItem(\"SensorCategories\") as string);\r\n\r\n    const handleUpdate = (event: FormEvent) => {\r\n        const form = event.currentTarget;\r\n        // @ts-ignore\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        } else if (title !== null && id !== null && title !== '' && id !== '') {\r\n            setValidated(false);\r\n            Swal.fire({\r\n                title: 'Do you want to save the changes?',\r\n                showDenyButton: true,\r\n                showCancelButton: true,\r\n                confirmButtonText: `Save`,\r\n                denyButtonText: `Don't save`,\r\n            }).then((result) => {\r\n                /* Read more about isConfirmed, isDenied below */\r\n                if (result.isConfirmed) {\r\n                    Swal.fire('Saved!', '', 'success');\r\n\r\n                    if (formTitle.split(' ')[0] === 'Add') {\r\n                        //TODO: add sensor function here.\r\n\r\n                    } else {\r\n                        //TODO: create sensor update function here\r\n                    }\r\n\r\n                    props.setIsUpdatable(false)\r\n                } else if (result.isDenied) {\r\n                    Swal.fire('Changes are not saved', '', 'info')\r\n                    props.setIsUpdatable(false)\r\n                }\r\n            })\r\n        } else {\r\n            setValidated(true);\r\n        }\r\n\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"my-4 p-3 \"\r\n             style={{maxWidth: '400px', border: '1px solid gray', margin: \"auto\", borderRadius: '10px'}}>\r\n            <Form.Row>\r\n                <Col className=\"pl-1 mb-3\">\r\n                    <strong style={{textDecoration: 'underline'}}>{formTitle}</strong>\r\n\r\n                    <i className='feather-x-circle text-dark float-right' onClick={() => props.setIsUpdatable(false)}/>\r\n                </Col>\r\n            </Form.Row>\r\n            <Form noValidate validated={validated}>\r\n\r\n                <Form.Row>\r\n                    <Form.Group className=\"form-group-dev\">\r\n                        <Form.Label className=\"text-left label-text\">Title of Sensor</Form.Label>\r\n                        <Form.Control required type=\"text\" className=\"form-input\" placeholder=\"\"\r\n                                      value={title ? title : ''}\r\n                                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTitle(e.target.value)}/>\r\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group className=\"form-group-dev\">\r\n                        <Form.Label className=\" label-text \">Sensor Id</Form.Label>\r\n                        <Form.Control className=\"form-input\" required type=\"text\" placeholder=\"\" value={id ? id : ''}\r\n                                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setId(e.target.value)}/>\r\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Group className=\"form-group-dev\">\r\n                        <Form.Label className=\"text-left label-text\">Threshold</Form.Label>\r\n                        <Row>\r\n                            <Col xs={8} sm={8}>\r\n                                <Form.Control className=\"form-input\" required type=\"range\" placeholder=\"\"\r\n                                              value={threshold ? threshold : ''}\r\n                                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setThreshold(Number(e.target.value))}/>\r\n                            </Col>\r\n                            <Col xs={4} sm={4}>\r\n                                <Form.Control className=\"form-input\" required type=\"text\" placeholder=\"\"\r\n                                              value={threshold ? threshold : ''}\r\n                                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setThreshold(Number(e.target.value))}/>\r\n                            </Col>\r\n                        </Row>\r\n\r\n\r\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Label className=\"text-left Sensor-label\">Sensor type</Form.Label>\r\n                    <Form.Group controlId=\"SensorSelectID\" className=\"form-group-dev\">\r\n                        <br/>\r\n                        <select name=\"sensors\" id=\"sensors\"\r\n                                onChange={(e: ChangeEvent<HTMLSelectElement>) => setType(e.target.value)}>\r\n                            {\r\n                                sensorCategories.map((sensorCategory: string) =>\r\n                                    <option value={sensorCategory}>{sensorCategory}</option>)}\r\n                        </select>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Group className=\"form-group-dev\">\r\n                        <Form.Label className=\"text-left label-text\">Sensor unit</Form.Label>\r\n                        <Form.Control className=\"form-input\" required type=\"text\" placeholder=\"\"\r\n                                      value={unit ? unit : ''}\r\n                                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUnit(e.target.value)}/>\r\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Button onClick={event => handleUpdate(event)} size='sm' variant='success'\r\n                        style={{width: '100%', padding: '10px'}}>\r\n                    {formTitle.split(' ')[0]}\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\nexport default SensorForm;\r\n",{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":67,"column":8,"nodeType":"89","endLine":67,"endColumn":20,"suggestions":"90"},{"ruleId":"87","severity":1,"message":"88","line":47,"column":8,"nodeType":"89","endLine":47,"endColumn":16,"suggestions":"91"},{"ruleId":"87","severity":1,"message":"92","line":79,"column":8,"nodeType":"89","endLine":79,"endColumn":38,"suggestions":"93"},{"ruleId":"94","severity":1,"message":"95","line":17,"column":12,"nodeType":"96","messageId":"97","endLine":17,"endColumn":16},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchedSensorSet' and 'getSensorSet'. Either include them or remove the dependency array.","ArrayExpression",["100"],["101"],"React Hook useEffect has missing dependencies: 'fetchedDataSet', 'getRecord', and 'sensor'. Either include them or remove the dependency array.",["102"],"@typescript-eslint/no-unused-vars","'type' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},"Update the dependencies array to be: [fetchedSensorSet, getSensorSet, sensorType]",{"range":"109","text":"110"},"Update the dependencies array to be: [fetchedSensorSet, getSensorSet, sensor]",{"range":"111","text":"112"},"Update the dependencies array to be: [startDate, endDate, sensorId, getRecord, fetchedDataSet, sensor]",{"range":"113","text":"114"},[2466,2478],"[fetchedSensorSet, getSensorSet, sensorType]",[2092,2100],"[fetchedSensorSet, getSensorSet, sensor]",[3366,3396],"[startDate, endDate, sensorId, getRecord, fetchedDataSet, sensor]"]